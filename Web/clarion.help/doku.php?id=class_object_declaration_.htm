<!DOCTYPE html>
<html lang="en" dir="ltr" class="no-js">
<head>
    <meta charset="utf-8" />
    <title>class_object_declaration_.htm [Clarion Community Help]</title>
    <script>(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
    <meta name="generator" content="DokuWiki"/>
<meta name="theme-color" content="#008800"/>
<meta name="robots" content="index,follow"/>
<meta name="keywords" content="class_object_declaration_.htm"/>
<link rel="search" type="application/opensearchdescription+xml" href="/lib/exe/opensearch.php" title="Clarion Community Help"/>
<link rel="start" href="/"/>
<link rel="contents" href="/doku.php?id=class_object_declaration_.htm&amp;do=index" title="Sitemap"/>
<link rel="manifest" href="/lib/exe/manifest.php"/>
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/feed.php"/>
<link rel="alternate" type="application/rss+xml" title="Current namespace" href="/feed.php?mode=list&amp;ns="/>
<link rel="alternate" type="text/html" title="Plain HTML" href="/doku.php?do=export_xhtml&amp;id=class_object_declaration_.htm"/>
<link rel="alternate" type="text/plain" title="Wiki Markup" href="/doku.php?do=export_raw&amp;id=class_object_declaration_.htm"/>
<link rel="canonical" href="http://clarion.help/doku.php?id=class_object_declaration_.htm"/>
<link rel="stylesheet" type="text/css" href="/lib/exe/css.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"/>
<!--[if gte IE 9]><!-->
<script type="text/javascript">/*<![CDATA[*/var NS='';var JSINFO = {"id":"class_object_declaration_.htm","namespace":"","ACT":"show","useHeadingNavigation":0,"useHeadingContent":0};
/*!]]>*/</script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/jquery.php?tseed=23f888679b4f1dc26eef34902aca964f"></script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/js.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"></script>
<!--<![endif]-->
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="shortcut icon" href="/lib/tpl/dokuwiki/images/favicon.ico" />
<link rel="apple-touch-icon" href="/lib/tpl/dokuwiki/images/apple-touch-icon.png" />
    </head>

<body>
    <div id="dokuwiki__site"><div id="dokuwiki__top" class="site dokuwiki mode_show tpl_dokuwiki     ">

        
<!-- ********** HEADER ********** -->
<div id="dokuwiki__header"><div class="pad group">

    
    <div class="headings group">
        <ul class="a11y skip">
            <li><a href="#dokuwiki__content">skip to content</a></li>
        </ul>

        <h1><a href="/doku.php?id=start"  accesskey="h" title="[H]"><img src="/lib/exe/fetch.php?media=logo.png" width="354" height="103" alt="" /> <span>Clarion Community Help</span></a></h1>
            </div>

    <div class="tools group">
        <!-- USER TOOLS -->
                    <div id="dokuwiki__usertools">
                <h3 class="a11y">User Tools</h3>
                <ul>
                    <li class="action login"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=login&amp;sectok=" title="Log In" rel="nofollow"><span>Log In</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10 17.25V14H3v-4h7V6.75L15.25 12 10 17.25M8 2h9a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2v-4h2v4h9V4H8v4H6V4a2 2 0 0 1 2-2z"/></svg></a></li>                </ul>
            </div>
        
        <!-- SITE TOOLS -->
        <div id="dokuwiki__sitetools">
            <h3 class="a11y">Site Tools</h3>
            <form action="/doku.php?id=start" method="get" role="search" class="search doku_form" id="dw__search" accept-charset="utf-8"><input type="hidden" name="do" value="search" /><input type="hidden" name="id" value="class_object_declaration_.htm" /><div class="no"><input name="q" type="text" class="edit" title="[F]" accesskey="f" placeholder="Search" autocomplete="on" id="qsearch__in" value="" /><button value="1" type="submit" title="Search">Search</button><div id="qsearch__out" class="ajax_qsearch JSpopup"></div></div></form>            <div class="mobileTools">
                <form action="/doku.php" method="get" accept-charset="utf-8"><div class="no"><input type="hidden" name="id" value="class_object_declaration_.htm" /><select name="do" class="edit quickselect" title="Tools"><option value="">Tools</option><optgroup label="Page Tools"><option value="edit">Show pagesource</option><option value="revisions">Old revisions</option><option value="backlink">Backlinks</option></optgroup><optgroup label="Site Tools"><option value="recent">Recent Changes</option><option value="media">Media Manager</option><option value="index">Sitemap</option></optgroup><optgroup label="User Tools"><option value="login">Log In</option></optgroup></select><button type="submit">&gt;</button></div></form>            </div>
            <ul>
                <li class="action recent"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=recent" title="Recent Changes [r]" rel="nofollow" accesskey="r">Recent Changes</a></li><li class="action media"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=media&amp;ns=" title="Media Manager" rel="nofollow">Media Manager</a></li><li class="action index"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=index" title="Sitemap [x]" rel="nofollow" accesskey="x">Sitemap</a></li>            </ul>
        </div>

    </div>

    <!-- BREADCRUMBS -->
            <div class="breadcrumbs">
                                        <div class="trace"><span class="bchead">Trace:</span> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=scientific_notation_pictures.htm"  class="breadcrumbs" title="scientific_notation_pictures.htm">scientific_notation_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=string_pictures.htm"  class="breadcrumbs" title="string_pictures.htm">string_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=date_pictures.htm"  class="breadcrumbs" title="date_pictures.htm">date_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=time_pictures.htm"  class="breadcrumbs" title="time_pictures.htm">time_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=pattern_pictures.htm"  class="breadcrumbs" title="pattern_pictures.htm">pattern_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=key_in_template_pictures.htm"  class="breadcrumbs" title="key_in_template_pictures.htm">key_in_template_pictures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=entity_declarations.htm"  class="breadcrumbs" title="entity_declarations.htm">entity_declarations.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=complex_data_structures.htm"  class="breadcrumbs" title="complex_data_structures.htm">complex_data_structures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=group_compound_data_structure_.htm"  class="breadcrumbs" title="group_compound_data_structure_.htm">group_compound_data_structure_.htm</a></bdi> <span class="bcsep">•</span> <span class="curid"><bdi><a href="/doku.php?id=class_object_declaration_.htm"  class="breadcrumbs" title="class_object_declaration_.htm">class_object_declaration_.htm</a></bdi></span></div>
                    </div>
    


    <hr class="a11y" />
</div></div><!-- /header -->

        <div class="wrapper group">

            
            <!-- ********** CONTENT ********** -->
            <div id="dokuwiki__content"><div class="pad group">
                
                <div class="pageId"><span>class_object_declaration_.htm</span></div>

                <div class="page group">
                                                            <!-- wikipage start -->
                    <div class="table sectionedit1"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>Navigation:</strong>  <a href="/doku.php?id=introduction.htm" class="wikilink1" title="introduction.htm">Language Reference</a> &gt; 4 - Entity Declarations &gt; Complex Data Structures &gt;====== CLASS (object declaration) ====== </td><td class="col1"> <a href="/doku.php?id=group_compound_data_structure_.htm" class="media" title="group_compound_data_structure_.htm"><img src="/lib/exe/fetch.php?media=btn_prev_n.gif" class="media" title="Previous page" alt="Previous page" /></a><a href="/doku.php?id=introduction.htm" class="media" title="introduction.htm"><img src="/lib/exe/fetch.php?media=btn_home_n.gif" class="media" title="Return to chapter overview" alt="Return to chapter overview" /></a><span class="curid"><a href="/doku.php?id=class_object_declaration_.htm#selfparent" class="media" title="class_object_declaration_.htm"><img src="/lib/exe/fetch.php?media=btn_next_n.gif" class="media" title="Next page" alt="Next page" /></a></span> </td>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign" colspan="2">  </td>
	</tr>
</table></div>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"> label </td><td class="col1"> <strong>CLASS( </strong>[ <em>parentclass</em> ]<strong> )</strong> </td><td class="col2"> [,<strong>EXTERNAL</strong>] [,<strong>IMPLEMENTS</strong>] [,<strong>DLL( )</strong>] [,<strong>STATIC</strong>] [,<strong>THREAD</strong>] [,<strong>BINDABLE</strong>] </td>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">  </td><td class="col1 leftalign">  </td><td class="col2"> [,<strong>MODULE( )</strong>] [, <strong>LINK( )</strong>] [, <strong>TYPE</strong>] [, <strong>DIM</strong>(<em>dimension</em>)] [,<strong>NETCLASS</strong>] [,<strong>PARTIAL</strong>] </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign">  </td><td class="col1"> [ <em>data members and methods </em>] </td><td class="col2 leftalign">  </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign">  </td><td class="col1"> <strong>END</strong> </td><td class="col2 leftalign">  </td>
	</tr>
</table></div>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=blk2blue.jpg" class="media" title="blk2blue.jpg"><img src="/lib/exe/fetch.php?media=blk2blue.jpg" class="media" title="blk2blue.jpg" alt="blk2blue.jpg" /></a>
</p>
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>CLASS</strong> </td><td class="col1"> An object containing <em>data members</em> and <em>methods </em>that operate on the data. </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <em>parentclass</em> </td><td class="col1"> The label of a previously declared CLASS structure whose data and methods the new CLASS inherits. This may be a CLASS with the TYPE attribute. </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <strong>EXTERNAL</strong> </td><td class="col1"> Specify the object is defined, and its memory is allocated, in an external library. </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <strong>IMPLEMENTS</strong> </td><td class="col1"> Specify an INTERFACE for the CLASS. This adds additional methods to the implementation of the CLASS. </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <strong><a href="/doku.php?id=dll_set_variable_defined_externally_in_dll_.htm" class="wikilink1" title="dll_set_variable_defined_externally_in_dll_.htm">DLL</a></strong> </td><td class="col1"> Specify the object is defined in a .DLL. This is required in addition to the EXTERNAL attribute. </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <strong>STATIC</strong> </td><td class="col1"> Specify the <em>data members&#039;</em> memory is permanently allocated. </td>
	</tr>
	<tr class="row6">
		<td class="col0"> <strong>THREAD</strong> </td><td class="col1"> Specify memory for all class variables are allocated once for each execution thread. Also causes Constructors and Destructors to be called on thread start and exit. </td>
	</tr>
	<tr class="row7">
		<td class="col0"> <strong>BINDABLE</strong> </td><td class="col1"> Specify all variables in the class may be used in dynamic expressions. </td>
	</tr>
	<tr class="row8">
		<td class="col0"> <strong>MODULE</strong> </td><td class="col1"> Specify the source code module containing the CLASS&#039;s member PROCEDURE definitions. This serves the same function as the MODULE structure within a MAP structure. If omitted, the member PROCEDURE definitions must all be in the same source code module containing the CLASS declaration. </td>
	</tr>
	<tr class="row9">
		<td class="col0"> <strong><a href="/doku.php?id=link_specify_class_link_into_project_.htm" class="wikilink1" title="link_specify_class_link_into_project_.htm">LINK</a></strong> </td><td class="col1"> Specify the source code module containing the CLASS&#039;s member PROCEDURE definitions is automatically added to the compiler&#039;s link list. This eliminates the need to specifically add the file to the project. </td>
	</tr>
	<tr class="row10">
		<td class="col0"> <strong>TYPE</strong> </td><td class="col1"> Specify the CLASS is only a type definition and not also an object instance of the CLASS. </td>
	</tr>
	<tr class="row11">
		<td class="col0"> <em>data members and methods</em> </td><td class="col1"> Data declarations and PROCEDURE prototypes. The <em>data members</em> may only be data declarations appropriate to a GROUP structure, and may include references to the same class (recursive classes). The WHAT and WHERE procedures allow access to the <em>data members</em> by their relative position within the CLASS structure. </td>
	</tr>
	<tr class="row12">
		<td class="col0"> <strong>DIM</strong> </td><td class="col1"> Declares a CLASS as an array.<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a> </td>
	</tr>
	<tr class="row13">
		<td class="col0"> <em>dimension</em> </td><td class="col1"> A positive numeric constant which specifies the number of elements in this <em>dimension</em> of the array. </td>
	</tr>
	<tr class="row14">
		<td class="col0"> <strong>NETCLASS</strong> </td><td class="col1"> Switch off the generation of additional Clarion&#039;specific code for the CLASS<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a> </td>
	</tr>
	<tr class="row15">
		<td class="col0"> <strong>PARTIAL</strong> </td><td class="col1"> Identifies a CLASS definition that is split into more than one physical file<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a> </td>
	</tr>
</table></div>

<p>
A <strong>CLASS</strong> structure declares an object which contains <em>data members</em> (properties) and the <em>methods</em> (PROCEDUREs) that act on that data. A CLASS structure must be terminated by a period or the END statement.
</p>

<p>
<strong>Derived CLASSes (Inheritance)</strong>
</p>

<p>
A CLASS declared with the <em>parentclass</em> parameter creates a <em>derived class</em> which inherits all the <em>data members and methods </em>of the named <em>parentclass</em>. The <em>derived class</em> may also contain its own <em>data members and methods</em>.
</p>

<p>
All<em> data members</em> explicitly declared in the <em>derived class</em> create new variables, and cannot be declared with the same labels as <em>data members</em> in the <em>parentclass</em>.
</p>

<p>
Any <em>method</em> prototyped in the <em>derived class </em>with the same name as a <em>method</em> in the <em>parentclass</em> overrides the inherited <em>method</em> if both have the same parameter lists. If the two <em>methods</em> have different parameter lists, they create polymorphic functions in the <em>derived class</em> that must obey the rules of Procedure Overloading.
</p>

<p>
<strong>Object Properties (Encapsulation)</strong>
</p>

<p>
Each instance of a CLASS, whether a base class, derived class, or a declared instance of either, contains its own set of <em>data members</em> (properties) specific to that instance. These may be private or public. However, there is only one copy of any inherited <em>methods</em> (residing in the CLASS that declared it) which any instance of that CLASS, or any of its <em>derived classes,</em> calls.
</p>

<p>
The <em>methods</em> of a CLASS with the TYPE attribute cannot be directly called (as <em>ClassName.Method</em>)–they must be called only as a member <em>methods</em> of the objects declared as the type (as <em>Object.Method</em>).
</p>

<p>
<strong>VIRTUAL Methods (Polymorphism)</strong>
</p>

<p>
If there is a <em>method</em> prototyped in the CLASS with the same label as a <em>method</em> in the <em>parentclass </em>with the <a href="/doku.php?id=virtual_set_virtual_method_.htm" class="wikilink1" title="virtual_set_virtual_method_.htm">VIRTUAL</a> attribute, it must also be prototyped with the VIRTUAL attribute in the <em>derived class</em>.
</p>

<p>
The VIRTUAL attribute on both prototypes creates virtual methods that allow the <em>methods</em> in a <em>parentclass </em>to call the same named VIRTUAL <em>methods</em> in the <em>derived class</em> to perform functions specific to the <em>derived class</em> that the <em>parentclass </em>does not know about.
</p>

<p>
VIRTUAL <em>methods</em> in the <em>derived class</em> may directly call the <em>parentclass </em>method of the same name by prepending <span class="curid"><a href="/doku.php?id=class_object_declaration_.htm#selfparent" class="wikilink1" title="class_object_declaration_.htm">PARENT</a></span> to the method&#039;s name. This allows incremental derivation wherein a <em>derived class</em> method may simply call down to the <em>parentclass </em>method to perform its functionality, then extend it for the requirements of the <em>derived class</em>.
</p>

<p>
VIRTUAL methods in the derived class may optionally use the <a href="/doku.php?id=derived_prevent_function_overloading_.htm" class="wikilink1" title="derived_prevent_function_overloading_.htm">DERIVED</a> attribute. This will cause the compiler to verify that a virtual method with the same name and calling signature exists in the base class. This prevents potential issues that can end up defining new virtual methods instead of overriding existing ones.
</p>

<p>
<strong>Scoping Issues</strong>
</p>

<p>
The scope of an object is dependent upon where it is declared. Generally, a declared object comes into scope at the CODE statement following its declaration and goes out of scope at the end of the related executable code section. A dynamically instantiated object (using NEW) shares the scope of the executable code section in which it is instantiated.
</p>

<p>
An Object declared:
</p>

<p>
·As Global data is in scope throughout the application.
</p>

<p>
·As Module data is in scope throughout the module.
</p>

<p>
·As Local data is in scope only in the procedure, except …
</p>

<p>
Methods prototyped in a derived CLASS declaration within a procedure&#039;s Local data section are Local Derived Methods and share the declaring procedure&#039;s scope for all local data declarations and routines. The methods must be defined within the same source module as the procedure within which the CLASS is declared and must immediately follow the procedure within that source–that is, they must come after any ROUTINEs and before any other procedures that may be in the same source module. This means the procedure&#039;s Local data declarations and ROUTINEs are all visible and can be referenced within these methods.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong>SomeProc    PROCEDURE</strong>
</p>

<p>
<strong>MyLocalVar  LONG</strong>
</p>

<p>
<strong>MyDerivedClass CLASS(MyClass)  !Derived class with a virtual method</strong>
</p>

<p>
<strong>MyProc          PROCEDURE,VIRTUAL</strong>
</p>

<p>
<strong>               END</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> !SomeProc main executable code goes here</strong>
</p>

<p>
<strong> !SomeProc ROUTINEs goes here </strong>
</p>

<p>
<strong>MyRoutine ROUTINE</strong>
</p>

<p>
<strong> !Routine code goes here</strong>
</p>

<p>
<strong> !MyDerivedClass methods immediately follow:</strong>
</p>

<p>
<strong>MyDerivedClass.MyProc PROCEDURE</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MyLocalVar = 10               !MyLocalVar is still in scope, and available for use</strong>
</p>

<p>
<strong> DO MyRoutine                  !MyRoutine is still in scope, and available for use</strong>
</p>

<p>
<strong>!Any other procedures in the same module go here, following all </strong>
</p>

<p>
<strong>!derived class methods</strong>
</p>

<p>
<strong>Instantiation</strong>
</p>

<p>
You declare an instance of a CLASS (an object) by simply naming the CLASS as the data type of the new instance, or by executing the NEW procedure in a reference assignment statement to a reference variable for that named CLASS. Either way, the new instance inherits all the <em>data members and methods</em> of the CLASS for which it is an instance. All the attributes of a CLASS except MODULE and TYPE are valid on an instance declaration.
</p>

<p>
If there is no TYPE attribute on the CLASS, the CLASS structure itself declares both the CLASS and an object instance of that CLASS. A CLASS with the TYPE attribute does not create an object instance of the CLASS.
</p>

<p>
For example, the following CLASS declaration declares the CLASS as a data type and an object of that type:
</p>

<p>
<strong>MyClass  CLASS       !Both a data type declaration and an object instance</strong>
</p>

<p>
<strong>MyField   LONG</strong>
</p>

<p>
<strong>MyProc    PROCEDURE</strong>
</p>

<p>
<strong>         END</strong>
</p>

<p>
while this only declares the CLASS as a data type:
</p>

<p>
<strong>MyClass  CLASS,TYPE  !Only a data type declaration </strong>
</p>

<p>
<strong>MyField   LONG</strong>
</p>

<p>
<strong>MyProc    PROCEDURE</strong>
</p>

<p>
<strong>         END</strong>
</p>

<p>
It is preferable to directly declare object instances as the CLASS data type rather than as a reference to the CLASS. This results in smaller quicker code and does not require you to use NEW and DISPOSE to explicitly create and destroy the object instance. The advantage of using NEW and DISPOSE is explicit control over the lifetime of the object. For example:
</p>

<p>
<strong>MyClass  CLASS,TYPE</strong>
</p>

<p>
<strong>MyField   LONG</strong>
</p>

<p>
<strong>MyProc    PROCEDURE</strong>
</p>

<p>
<strong>         END</strong>
</p>

<p>
<strong>OneClass MyClass           !Declared object instance, smaller and quicker</strong>
</p>

<p>
<strong>TwoClass &amp;amp;MyClass          !Object reference, must use New and DISPOSE</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> !execute some code here</strong>
</p>

<p>
<strong> TwoClass &amp;amp;= NEW(MyClass)  !The lifetime of the object starts here</strong>
</p>

<p>
<strong> !execute some code here</strong>
</p>

<p>
<strong> DISPOSE(TwoClass)         ! and extends only to here</strong>
</p>

<p>
<strong> !execute some code here</strong>
</p>

<p>
Another advantage of declaring the object is the ability to declare the object with any of the attributes available for the CLASS declaration itself (except TYPE and MODULE). For instance, you can declare an object with the THREAD attribute, whether the CLASS is declared with THREAD or not.
</p>

<p>
The lifetime of an object depends on how it is instantiated:
</p>

<p>
·An object declared in the Global data section or a Module&#039;s data section is instantiated at the CODE statement following the PROGRAM statement and de-instantiated when the application terminates.
</p>

<p>
·A reference to an object is instantiated by the NEW statement, and de-instantiated by the DISPOSE statement.
</p>

<p>
·An object declared in a procedure&#039;s Local data section is instantiated at the CODE statement following the PROCEDURE statement and de-instantiated when a RETURN (implicit or explicit) executes to terminate the procedure.
</p>

<p>
<strong>Threading</strong>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=notebox.jpg" class="media" title="notebox.jpg"><img src="/lib/exe/fetch.php?media=notebox.jpg" class="media" title="NoteBox.jpg" alt="NoteBox.jpg" /></a>
</p>

<p>
The constructors and destructors for threaded classes are called for every thread. Every new thread gets new instances of CLASSes and variables declared at the global or module level with the THREAD attribute. The RTL calls constructors for the threaded classes when the thread is started and the destructors when the thread is ended. In previous Clarion versions they were called only when the main thread started and ended.
</p>

<p>
<strong>Data (Property) Initialization</strong>
</p>

<p>
The simple data type <em>data members </em>of an object are automatically allocated memory and initialized to blank or zero (unless the AUTO attribute is specified) when the object comes into scope. The allocated memory is returned to the operating system when the object goes out of scope.
</p>

<p>
The reference variable <em>data members </em>of an object are not allocated memory and are not initialized when the object comes into scope–you must specifically execute a reference assignment or a NEW statement. These references variables are not automatically cleared when the object goes out of scope, so you must DISPOSE of all NEWed properties before the object goes out of scope.
</p>

<p>
<strong>Constructors and Destructors</strong>
</p>

<p>
A CLASS <em>method</em> labelled “Construct” is a constructor method which is automatically invoked when the object comes into scope, immediately after the <em>data members </em>of the object are allocated and initialized.
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=blk2blue.jpg" class="media" title="blk2blue.jpg"><img src="/lib/exe/fetch.php?media=blk2blue.jpg" class="media" title="blk2blue.jpg" alt="blk2blue.jpg" /></a>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newc7.jpg" class="media" title="newc7.jpg"><img src="/lib/exe/fetch.php?media=newc7.jpg" class="media" title="NewC7.jpg" alt="NewC7.jpg" /></a>
</p>

<p>
The “Construct” <em>method</em> may not receive any parameters and may not use the VIRTUAL attribute. You may explicitly call the “Construct” method in addition to its automatic invocation.
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a>
</p>

<p>
Multiple Constructors with parameters are now supported.
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=blk2blue.jpg" class="media" title="blk2blue.jpg"><img src="/lib/exe/fetch.php?media=blk2blue.jpg" class="media" title="blk2blue.jpg" alt="blk2blue.jpg" /></a>
</p>

<p>
If an object is an instance of a derived CLASS and both the <em>parentclass </em>and the derived CLASS contain constructors and the derived CLASS&#039;s constructor does not have the REPLACE attribute, then the <em>parentclass </em>constructor is automatically invoked at the beginning of the derived CLASS&#039;s constructor. If the derived CLASS&#039;s constructor does have the REPLACE attribute, then only derived CLASS&#039;s constructor is automatically invoked (the derived CLASS&#039;s constructor method can explicitly call PARENT.Construct if it needs to).
</p>

<p>
A CLASS <em>method</em> labelled “Destruct” is a destructor method which is automatically invoked when the object leaves scope, immediately before the <em>data members </em>of the object are de-allocated. The “Destruct” <em>method</em> may not receive any parameters. You may explicitly call the “Destruct” method in addition to its automatic invocation.
</p>

<p>
If an object is an instance of a derived CLASS and both the <em>parentclass </em>and the derived CLASS contain destructors and the derived CLASS&#039;s destructor does not have the REPLACE attribute, then the <em>parentclass </em>destructor is automatically invoked at the end of the derived CLASS&#039;s destructor. If the derived CLASS&#039;s destructor does have the REPLACE attribute, then only derived CLASS&#039;s destructor is automatically invoked (the derived CLASS&#039;s destructor method can explicitly call PARENT.Destruct if it needs to).
</p>

<p>
<strong>Public, PRIVATE, and PROTECTED (Encapsulation)</strong>
</p>

<p>
Public <em>data members and methods </em>of a CLASS or derived CLASS are declared without either the PRIVATE or PROTECTED attributes. Public <em>data members and methods </em>are visible to all the <em>methods</em> of the declaring CLASS, and derived CLASSes, and any code where the object is in scope.
</p>

<p>
Private <em>data members and methods </em>are declaredwith the PRIVATE attribute. Private <em>data members and methods </em>are visible only to the <em>methods</em> of the CLASS within which they are declared and any other procedures contained in the same source code module.
</p>

<p>
Protected <em>data members and methods </em>are declared with the PROTECTED attribute. Protected <em>data members and methods </em>are visible only to the <em>methods</em> of the CLASS within which they are declared, and to the <em>methods</em> of any CLASS derived from the CLASS within which they are declared.
</p>

<p>
<strong>Method Definition</strong>
</p>

<p>
The PROCEDURE definition of a <em>method</em> (its executable code, not its prototype) is external to the CLASS structure. The <em>method&#039;s</em> definition must either prepend the label of the CLASS to the label of the PROCEDURE, or name the CLASS (and label it SELF) as the first (implicit) parameter in the list of parameters passed in to the PROCEDURE.
</p>

<p>
Remember that on the PROCEDURE definition statement you are assigning labels for use within the method to all the passed parameters, and so, since the CLASS&#039;s label is the data type of the implicit first parameter, you must use SELF as the assigned label for the CLASS name parameter. For example, for the following CLASS declaration:
</p>

<p>
<strong>MyClass CLASS</strong>
</p>

<p>
<strong>MyProc   PROCEDURE(LONG PassedVar)             !The method takes 1 parameter</strong>
</p>

<p>
<strong>        END</strong>
</p>

<p>
you may define the MyProc PROCEDURE either as:
</p>

<p>
<strong>MyClass.MyProc PROCEDURE(LONG PassedVar)       !Prepend the CLASS name to </strong>
</p>

<p>
<strong> CODE                                          !the method&#039;s label</strong>
</p>

<p>
or as:
</p>

<p>
<strong>MyProc PROCEDURE(MyClass SELF, LONG PassedVar) !The CLASS name is the</strong>
</p>

<p>
<strong>CODE</strong>
</p>

<p>
<strong>! implicit first parameter&#039;s data type, labeled SELF</strong>
</p>

<p>
<strong>Referencing an Object&#039;s properties and methods in your code</strong>
</p>

<p>
You must reference the <em>data members </em>of a CLASS using Clarion&#039;s Field Qualification syntax. To do this, you prepend the label of the CLASS (if it is an object instance of itself) or the label of an object instance of the CLASS to the label of the <em>data member</em>.
</p>

<p>
For example, for the following CLASS declarations:
</p>

<p>
<strong>MyClass  CLASS         !Without TYPE, this is also an object instance</strong>
</p>

<p>
<strong>MyField   LONG         ! in addition to a class type declaration</strong>
</p>

<p>
<strong>MyProc    PROCEDURE</strong>
</p>

<p>
<strong>         END</strong>
</p>

<p>
<strong>MyClass2 MyClass       !Declare another object instance of MyClass</strong>
</p>

<p>
you must reference the two MyField variables from procedures external to the object as:
</p>

<p>
<strong>MyClass.MyField = 10   !References the MyClass CLASS declaration&#039;s object</strong>
</p>

<p>
<strong>MyClass2.MyField = 10  !References the MyClass2 declaration&#039;s object</strong>
</p>

<p>
You may call the <em>methods </em>of a CLASS either using Field Qualification syntax (by prepending the label of the CLASS to the label of the <em>method</em>), or by passing the label of the CLASS as the first (implicit) parameter in the list of parameters passed to the PROCEDURE.
</p>

<p>
For example, for the following CLASS declaration:
</p>

<p>
<strong>MyClass  CLASS</strong>
</p>

<p>
<strong>MyProc    PROCEDURE</strong>
</p>

<p>
<strong>         END</strong>
</p>

<p>
you may call the MyProc PROCEDURE either as:
</p>

<p>
<strong>CODE</strong>
</p>

<p>
<strong>MyClass.MyProc</strong>
</p>

<p>
or as:
</p>

<p>
<strong>CODE</strong>
</p>

<p>
<strong>MyProc(MyClass)</strong>
</p>

<p>
<strong>SELF and PARENT</strong>
</p>

<p>
Within the <em>methods</em> of a CLASS, the <em>data members and methods</em> of the current object&#039;s instance are referenced with SELF prepended to their labels instead of the name of the CLASS. This allows the <em>methods</em> to generically reference the <em>data members and methods</em> of the currently executing instance of the CLASS, without regard to whether it is executing the <em>parentclass</em>, a <em>derived class</em>, or any instance of either. This is also the mechanism that allows a <em>parentclass </em>to call virtual <em>methods</em> of a <em>derived class</em>.
</p>

<p>
For example, expanding on the previous example, MyField is referenced within the MyClass.MyProc method as:
</p>

<p>
<strong>MyClass.MyProc PROCEDURE</strong>
</p>

<p>
<strong>CODE</strong>
</p>

<p>
<strong>SELF.MyField = 10 !Assign to the current object instance&#039;s property</strong>
</p>

<p>
The <em>data members and methods</em> of a <em>parentclass </em>can be directly referenced from within the methods of a <em>derived class</em> with PARENT prepended to their labels instead of SELF.
</p>

<p>
For example:
</p>

<p>
<strong>MyDerivedClass.MyProc PROCEDURE</strong>
</p>

<p>
<strong>CODE</strong>
</p>

<p>
<strong>!execute some code</strong>
</p>

<p>
<strong>PARENT.MyProc       !Call the base class method</strong>
</p>

<p>
<strong>!execute some more code</strong>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=notebox.jpg" class="media" title="notebox.jpg"><img src="/lib/exe/fetch.php?media=notebox.jpg" class="media" title="NoteBox.jpg" alt="NoteBox.jpg" /></a>
</p>

<p>
Methods of derived CLASSes cannot have a formal parameter with the label PARENT, and additionally no method can have an explicit formal parameter with the label SELF.
</p>

<p>
For example:
</p>

<p>
<strong>MyDerivedClass.MyProc PROCEDURE(MyDerivedClass Parent) !Illegal use of Parent</strong>
</p>

<p>
The compiler produces a “Redefining system intrinsics” warning for any explicit attempt to declare any data with the labels SELF or PARENT used in this context.
</p>

<p>
<em class="u"><strong>Nested CLASSes</strong></em>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a>
</p>

<p>
In Clarion .Net nested classes are supported. You can declare a class inside of another class. The only restriction is that only inline methods, properties, and indexers can be used in the nested class. See also <a href="/doku.php?id=inline_embed_source_code_in_a_class_.htm" class="wikilink1" title="inline_embed_source_code_in_a_class_.htm">INLINE</a>.
</p>

<p>
<strong>CLASS Conceptual Example:</strong>
</p>

<p>
<strong>      PROGRAM</strong>
</p>

<p>
<strong>      MAP.                                       !MAP required to get BUILTINS.CLW</strong>
</p>

<p>
<strong>OneClass CLASS                                   !Base class</strong>
</p>

<p>
<strong>NameGroup GROUP                                  !Reference as OneClass.NameGroup</strong>
</p>

<p>
<strong>First      STRING(20)                            !reference as OneClass.NameGroup.First</strong>
</p>

<p>
<strong>Last       STRING(20)                            !reference as OneClass.NameGroup.Last </strong>
</p>

<p>
<strong>          END </strong>
</p>

<p>
<strong>BaseProc  PROCEDURE(REAL Parm)                   !Declare method prototype</strong>
</p>

<p>
<strong>Func      PROCEDURE(REAL Parm),STRING,VIRTUAL    !Declare virtual method prototype</strong>
</p>

<p>
<strong>Proc      PROCEDURE(REAL Parm),VIRTUAL           !Declare virtual method prototype</strong>
</p>

<p>
<strong>         END                                     !End CLASS declaration</strong>
</p>

<p>
<strong>TwoClass  CLASS(OneClass),MODULE(&#039;TwoClass.CLW&#039;) !Derived from OneClass</strong>
</p>

<p>
<strong>Func       PROCEDURE(LONG Parm),STRING           !replaces OneClass.Func</strong>
</p>

<p>
<strong>Proc       PROCEDURE(STRING Msg,LONG Parm)       !Functionally overloaded</strong>
</p>

<p>
<strong>          END</strong>
</p>

<p>
<strong>ClassThree CLASS(TwoClass),MODULE(&#039;Class3.CLW&#039;)  !Derived from TwoClass</strong>
</p>

<p>
<strong>Func        PROCEDURE(&lt;;STRING Msg&gt;,LONG Parm),STRING,VIRTUAL</strong>
</p>

<p>
<strong>Proc        PROCEDURE(REAL Parm),VIRTUAL</strong>
</p>

<p>
<strong>           END</strong>
</p>

<p>
<strong>ClassFour  ClassThree                            !Declare an instance of ClassThree</strong>
</p>

<p>
<strong>ClassFive  ClassThree                            !Declare an instance of ClassThree</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> OneClass.NameGroup =   &#039;|OneClass Method&#039;       !Assign values to each instance of NameGroup</strong>
</p>

<p>
<strong> TwoClass.NameGroup =   &#039;|TwoClass Method&#039;</strong>
</p>

<p>
<strong> ClassThree.NameGroup = &#039;|ClassThree Method&#039;</strong>
</p>

<p>
<strong> ClassFour.NameGroup =  &#039;|ClassFour Method&#039;</strong>
</p>

<p>
<strong> MESSAGE(OneClass.NameGroup &amp;amp; OneClass.Func(1.0))!Calls OneClass.Func</strong>
</p>

<p>
<strong> MESSAGE(TwoClass.NameGroup &amp;amp; TwoClass.Func(2))  !Calls TwoClass.Func</strong>
</p>

<p>
<strong> MESSAGE(ClassThree.NameGroup &amp;amp; ClassThree.Func(&#039;|Call ClassThree.Func&#039;,3.0))</strong>
</p>

<p>
<strong>!Calls ClassThree.Func</strong>
</p>

<p>
<strong> MESSAGE(ClassFour.NameGroup &amp;amp; ClassFour.Func(&#039;|Call ClassFour.Func&#039;,4.0))</strong>
</p>

<p>
<strong>!Also Calls ClassThree.Func</strong>
</p>

<p>
<strong> OneClass.BaseProc(5)                            !BaseProc Calls OneClass.Proc &amp;amp; Func</strong>
</p>

<p>
<strong> BaseProc(TwoClass,6)                            !BaseProc Also calls OneClass.Proc &amp;amp; Func</strong>
</p>

<p>
<strong> TwoClass.Proc(&#039;Second Class&#039;,7)                 !Calls TwoClass.Proc (overloaded)</strong>
</p>

<p>
<strong> ClassThree.BaseProc(8)                          !BaseProc Calls ClassThree.Proc &amp;amp; Func </strong>
</p>

<p>
<strong> ClassFour.BaseProc(9)                           !BaseProc Also Calls ClassThree.Proc &amp;amp; Func</strong>
</p>

<p>
<strong> Proc(ClassFour,&#039;Fourth Class&#039;,10)               !Calls TwoClass.Proc (overloaded)</strong>
</p>

<p>
<strong>OneClass.BaseProc   PROCEDURE(REAL Parm)         !Definition of OneClass.BaseProc</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MESSAGE(Parm &amp;amp; SELF.NameGroup &amp;amp;&#039;|BaseProc executing|calling SELF.Proc Virtual method&#039;)</strong>
</p>

<p>
<strong> SELF.Proc(Parm)                                 !Calls virtual method</strong>
</p>

<p>
<strong> MESSAGE(Parm &amp;amp; SELF.NameGroup&amp;amp;&#039;|BaseProc executing|calling SELF.Func Virtual method&#039;)</strong>
</p>

<p>
<strong> MESSAGE(SELF.NameGroup &amp;amp; SELF.Func(Parm))       !Calls virtual method</strong>
</p>

<p>
<strong>OneClass.Func   PROCEDURE(REAL Parm)             !Definition of OneClass.Func</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> RETURN(&#039;|Executing OneClass.Func - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<strong>Proc       PROCEDURE(OneClass SELF,REAL Parm)   !Definition of OneClass.Proc</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MESSAGE(SELF.NameGroup &amp;amp; &#039; |Executing OneClass.Proc - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=black.jpg" class="media" title="black.jpg"><img src="/lib/exe/fetch.php?media=black.jpg" class="media" title="black.jpg" alt="black.jpg" /></a><strong> </strong>
</p>

<p>
<strong>  !The TwoClass.CLW file contains:</strong>
</p>

<p>
<strong>  MEMBER(&#039;ClassPrg&#039;)</strong>
</p>

<p>
<strong>Func       PROCEDURE(TwoClass SELF,LONG Parm)      !Definition of TwoClass.Func</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> RETURN(&#039;|Executing TwoClass.Func - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<strong>TwoClass.Proc  PROCEDURE(STRING Msg,LONG Parm)     !Definition of TwoClass.Proc</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MESSAGE(Msg &amp;amp; &#039;|Executing TwoClass.Proc - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<a href="/lib/exe/detail.php?id=class_object_declaration_.htm&amp;media=black.jpg" class="media" title="black.jpg"><img src="/lib/exe/fetch.php?media=black.jpg" class="media" title="black.jpg" alt="black.jpg" /></a><strong> </strong>
</p>

<p>
<strong>  !The Class3.CLW file contains:</strong>
</p>

<p>
<strong>  MEMBER(&#039;ClassPrg&#039;)</strong>
</p>

<p>
<strong>ClassThree.Func  PROCEDURE(&lt;;STRING Msg&gt;,LONG Parm) !Definition of ClassThree.Func</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> SELF.Proc(Msg,Parm)                               !Call TwoClass.Proc (overloaded)</strong>
</p>

<p>
<strong> RETURN(Msg &amp;amp; &#039;|Executing ClassThree.Func - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<strong>ClassThree.Proc  PROCEDURE(REAL Parm)              !Definition of ClassThree.Proc</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> SELF.Proc(&#039;Called from ClassThree.Proc&#039;,Parm)     !Call TwoClass.Proc</strong>
</p>

<p>
<strong> MESSAGE(SELF.NameGroup &amp;amp;&#039; |Executing ClassThree.Proc - &#039; &amp;amp; Parm)</strong>
</p>

<p>
<strong>See Also:</strong>
</p>

<p>
<a href="/doku.php?id=virtual_set_virtual_method_.htm" class="wikilink1" title="virtual_set_virtual_method_.htm">VIRTUAL</a>
</p>

<p>
<a href="/doku.php?id=derived_prevent_function_overloading_.htm" class="wikilink1" title="derived_prevent_function_overloading_.htm">DERIVED</a>
</p>

<p>
<a href="/doku.php?id=field_qualification.htm" class="wikilink1" title="field_qualification.htm">Field Qualification</a>
</p>

<p>
<a href="/doku.php?id=module_specify_member_source_file_.htm" class="wikilink1" title="module_specify_member_source_file_.htm">MODULE</a>
</p>

<p>
<a href="/doku.php?id=procedure_prototypes.htm" class="wikilink1" title="procedure_prototypes.htm">PROCEDURE Prototypes</a>
</p>

<p>
<a href="/doku.php?id=procedure_overloading.htm" class="wikilink1" title="procedure_overloading.htm">Procedure Overloading</a>
</p>

<p>
<a href="/doku.php?id=what_return_field_from_group_.htm" class="wikilink1" title="what_return_field_from_group_.htm">WHAT</a>
</p>

<p>
<a href="/doku.php?id=where_return_field_position_in_group_.htm" class="wikilink1" title="where_return_field_position_in_group_.htm">WHERE</a>
</p>

                    <!-- wikipage stop -->
                                    </div>

                <div class="docInfo"><bdi>class_object_declaration_.htm.txt</bdi> · Last modified: 2021/04/15 15:57 (external edit)</div>

                            </div></div><!-- /content -->

            <hr class="a11y" />

            <!-- PAGE ACTIONS -->
            <div id="dokuwiki__pagetools">
                <h3 class="a11y">Page Tools</h3>
                <div class="tools">
                    <ul>
                        <li class="source"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=edit" title="Show pagesource [v]" rel="nofollow" accesskey="v"><span>Show pagesource</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 9h5.5L13 3.5V9M6 2h8l6 6v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4c0-1.11.89-2 2-2m.12 13.5l3.74 3.74 1.42-1.41-2.33-2.33 2.33-2.33-1.42-1.41-3.74 3.74m11.16 0l-3.74-3.74-1.42 1.41 2.33 2.33-2.33 2.33 1.42 1.41 3.74-3.74z"/></svg></a></li><li class="revs"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=revisions" title="Old revisions [o]" rel="nofollow" accesskey="o"><span>Old revisions</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M11 7v5.11l4.71 2.79.79-1.28-4-2.37V7m0-5C8.97 2 5.91 3.92 4.27 6.77L2 4.5V11h6.5L5.75 8.25C6.96 5.73 9.5 4 12.5 4a7.5 7.5 0 0 1 7.5 7.5 7.5 7.5 0 0 1-7.5 7.5c-3.27 0-6.03-2.09-7.06-5h-2.1c1.1 4.03 4.77 7 9.16 7 5.24 0 9.5-4.25 9.5-9.5A9.5 9.5 0 0 0 12.5 2z"/></svg></a></li><li class="backlink"><a href="/doku.php?id=class_object_declaration_.htm&amp;do=backlink" title="Backlinks" rel="nofollow"><span>Backlinks</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10.59 13.41c.41.39.41 1.03 0 1.42-.39.39-1.03.39-1.42 0a5.003 5.003 0 0 1 0-7.07l3.54-3.54a5.003 5.003 0 0 1 7.07 0 5.003 5.003 0 0 1 0 7.07l-1.49 1.49c.01-.82-.12-1.64-.4-2.42l.47-.48a2.982 2.982 0 0 0 0-4.24 2.982 2.982 0 0 0-4.24 0l-3.53 3.53a2.982 2.982 0 0 0 0 4.24m2.82-4.24c.39-.39 1.03-.39 1.42 0a5.003 5.003 0 0 1 0 7.07l-3.54 3.54a5.003 5.003 0 0 1-7.07 0 5.003 5.003 0 0 1 0-7.07l1.49-1.49c-.01.82.12 1.64.4 2.43l-.47.47a2.982 2.982 0 0 0 0 4.24 2.982 2.982 0 0 0 4.24 0l3.53-3.53a2.982 2.982 0 0 0 0-4.24.973.973 0 0 1 0-1.42z"/></svg></a></li><li class="top"><a href="#dokuwiki__top" title="Back to top [t]" rel="nofollow" accesskey="t"><span>Back to top</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 20h-2V8l-5.5 5.5-1.42-1.42L12 4.16l7.92 7.92-1.42 1.42L13 8v12z"/></svg></a></li>                    </ul>
                </div>
            </div>
        </div><!-- /wrapper -->

        
<!-- ********** FOOTER ********** -->
<div id="dokuwiki__footer"><div class="pad">
    <div class="license">Except where otherwise noted, content on this wiki is licensed under the following license: <bdi><a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license" class="urlextern">CC Attribution-Share Alike 4.0 International</a></bdi></div>
    <div class="buttons">
        <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"><img src="/lib/images/license/button/cc-by-sa.png" alt="CC Attribution-Share Alike 4.0 International" /></a>        <a href="https://www.dokuwiki.org/donate" title="Donate" ><img
            src="/lib/tpl/dokuwiki/images/button-donate.gif" width="80" height="15" alt="Donate" /></a>
        <a href="https://php.net" title="Powered by PHP" ><img
            src="/lib/tpl/dokuwiki/images/button-php.gif" width="80" height="15" alt="Powered by PHP" /></a>
        <a href="//validator.w3.org/check/referer" title="Valid HTML5" ><img
            src="/lib/tpl/dokuwiki/images/button-html5.png" width="80" height="15" alt="Valid HTML5" /></a>
        <a href="//jigsaw.w3.org/css-validator/check/referer?profile=css3" title="Valid CSS" ><img
            src="/lib/tpl/dokuwiki/images/button-css.png" width="80" height="15" alt="Valid CSS" /></a>
        <a href="https://dokuwiki.org/" title="Driven by DokuWiki" ><img
            src="/lib/tpl/dokuwiki/images/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" /></a>
    </div>
</div></div><!-- /footer -->

    </div></div><!-- /site -->

    <div class="no"><img src="/lib/exe/indexer.php?id=class_object_declaration_.htm&amp;1631826465" width="2" height="1" alt="" /></div>
    <div id="screen__mode" class="no"></div></body>
</html>
