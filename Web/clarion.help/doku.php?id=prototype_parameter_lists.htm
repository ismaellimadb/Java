<!DOCTYPE html>
<html lang="en" dir="ltr" class="no-js">
<head>
    <meta charset="utf-8" />
    <title>prototype_parameter_lists.htm [Clarion Community Help]</title>
    <script>(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
    <meta name="generator" content="DokuWiki"/>
<meta name="theme-color" content="#008800"/>
<meta name="robots" content="index,follow"/>
<meta name="keywords" content="prototype_parameter_lists.htm"/>
<link rel="search" type="application/opensearchdescription+xml" href="/lib/exe/opensearch.php" title="Clarion Community Help"/>
<link rel="start" href="/"/>
<link rel="contents" href="/doku.php?id=prototype_parameter_lists.htm&amp;do=index" title="Sitemap"/>
<link rel="manifest" href="/lib/exe/manifest.php"/>
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/feed.php"/>
<link rel="alternate" type="application/rss+xml" title="Current namespace" href="/feed.php?mode=list&amp;ns="/>
<link rel="alternate" type="text/html" title="Plain HTML" href="/doku.php?do=export_xhtml&amp;id=prototype_parameter_lists.htm"/>
<link rel="alternate" type="text/plain" title="Wiki Markup" href="/doku.php?do=export_raw&amp;id=prototype_parameter_lists.htm"/>
<link rel="canonical" href="http://clarion.help/doku.php?id=prototype_parameter_lists.htm"/>
<link rel="stylesheet" type="text/css" href="/lib/exe/css.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"/>
<!--[if gte IE 9]><!-->
<script type="text/javascript">/*<![CDATA[*/var NS='';var JSINFO = {"id":"prototype_parameter_lists.htm","namespace":"","ACT":"show","useHeadingNavigation":0,"useHeadingContent":0};
/*!]]>*/</script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/jquery.php?tseed=23f888679b4f1dc26eef34902aca964f"></script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/js.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"></script>
<!--<![endif]-->
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="shortcut icon" href="/lib/tpl/dokuwiki/images/favicon.ico" />
<link rel="apple-touch-icon" href="/lib/tpl/dokuwiki/images/apple-touch-icon.png" />
    </head>

<body>
    <div id="dokuwiki__site"><div id="dokuwiki__top" class="site dokuwiki mode_show tpl_dokuwiki     ">

        
<!-- ********** HEADER ********** -->
<div id="dokuwiki__header"><div class="pad group">

    
    <div class="headings group">
        <ul class="a11y skip">
            <li><a href="#dokuwiki__content">skip to content</a></li>
        </ul>

        <h1><a href="/doku.php?id=start"  accesskey="h" title="[H]"><img src="/lib/exe/fetch.php?media=logo.png" width="354" height="103" alt="" /> <span>Clarion Community Help</span></a></h1>
            </div>

    <div class="tools group">
        <!-- USER TOOLS -->
                    <div id="dokuwiki__usertools">
                <h3 class="a11y">User Tools</h3>
                <ul>
                    <li class="action login"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=login&amp;sectok=" title="Log In" rel="nofollow"><span>Log In</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10 17.25V14H3v-4h7V6.75L15.25 12 10 17.25M8 2h9a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2v-4h2v4h9V4H8v4H6V4a2 2 0 0 1 2-2z"/></svg></a></li>                </ul>
            </div>
        
        <!-- SITE TOOLS -->
        <div id="dokuwiki__sitetools">
            <h3 class="a11y">Site Tools</h3>
            <form action="/doku.php?id=start" method="get" role="search" class="search doku_form" id="dw__search" accept-charset="utf-8"><input type="hidden" name="do" value="search" /><input type="hidden" name="id" value="prototype_parameter_lists.htm" /><div class="no"><input name="q" type="text" class="edit" title="[F]" accesskey="f" placeholder="Search" autocomplete="on" id="qsearch__in" value="" /><button value="1" type="submit" title="Search">Search</button><div id="qsearch__out" class="ajax_qsearch JSpopup"></div></div></form>            <div class="mobileTools">
                <form action="/doku.php" method="get" accept-charset="utf-8"><div class="no"><input type="hidden" name="id" value="prototype_parameter_lists.htm" /><select name="do" class="edit quickselect" title="Tools"><option value="">Tools</option><optgroup label="Page Tools"><option value="edit">Show pagesource</option><option value="revisions">Old revisions</option><option value="backlink">Backlinks</option></optgroup><optgroup label="Site Tools"><option value="recent">Recent Changes</option><option value="media">Media Manager</option><option value="index">Sitemap</option></optgroup><optgroup label="User Tools"><option value="login">Log In</option></optgroup></select><button type="submit">&gt;</button></div></form>            </div>
            <ul>
                <li class="action recent"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=recent" title="Recent Changes [r]" rel="nofollow" accesskey="r">Recent Changes</a></li><li class="action media"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=media&amp;ns=" title="Media Manager" rel="nofollow">Media Manager</a></li><li class="action index"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=index" title="Sitemap [x]" rel="nofollow" accesskey="x">Sitemap</a></li>            </ul>
        </div>

    </div>

    <!-- BREADCRUMBS -->
            <div class="breadcrumbs">
                                        <div class="trace"><span class="bchead">Trace:</span> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=procedure_define_a_procedure_.htm"  class="breadcrumbs" title="procedure_define_a_procedure_.htm">procedure_define_a_procedure_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=code_begin_executable_statements_.htm"  class="breadcrumbs" title="code_begin_executable_statements_.htm">code_begin_executable_statements_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=data_begin_routine_local_data_section_.htm"  class="breadcrumbs" title="data_begin_routine_local_data_section_.htm">data_begin_routine_local_data_section_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=routine_declare_local_subroutine_.htm"  class="breadcrumbs" title="routine_declare_local_subroutine_.htm">routine_declare_local_subroutine_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=end_terminate_a_structure_.htm"  class="breadcrumbs" title="end_terminate_a_structure_.htm">end_terminate_a_structure_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=statement_execution_sequence.htm"  class="breadcrumbs" title="statement_execution_sequence.htm">statement_execution_sequence.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=procedure_calls.htm"  class="breadcrumbs" title="procedure_calls.htm">procedure_calls.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=procedure_prototypes.htm"  class="breadcrumbs" title="procedure_prototypes.htm">procedure_prototypes.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=prototype_syntax.htm"  class="breadcrumbs" title="prototype_syntax.htm">prototype_syntax.htm</a></bdi> <span class="bcsep">•</span> <span class="curid"><bdi><a href="/doku.php?id=prototype_parameter_lists.htm"  class="breadcrumbs" title="prototype_parameter_lists.htm">prototype_parameter_lists.htm</a></bdi></span></div>
                    </div>
    


    <hr class="a11y" />
</div></div><!-- /header -->

        <div class="wrapper group">

            
            <!-- ********** CONTENT ********** -->
            <div id="dokuwiki__content"><div class="pad group">
                
                <div class="pageId"><span>prototype_parameter_lists.htm</span></div>

                <div class="page group">
                                                            <!-- wikipage start -->
                    <div class="table sectionedit1"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>Navigation:</strong>  <a href="/doku.php?id=introduction.htm" class="wikilink1" title="introduction.htm">Language Reference</a> &gt; 2 - Program Source Code Format &gt; PROCEDURE Prototypes &gt;====== Prototype Parameter Lists ====== </td><td class="col1"> <a href="/doku.php?id=prototype_syntax.htm" class="media" title="prototype_syntax.htm"><img src="/lib/exe/fetch.php?media=btn_prev_n.gif" class="media" title="Previous page" alt="Previous page" /></a><a href="/doku.php?id=introduction.htm" class="media" title="introduction.htm"><img src="/lib/exe/fetch.php?media=btn_home_n.gif" class="media" title="Return to chapter overview" alt="Return to chapter overview" /></a><a href="/doku.php?id=procedure_return_types.htm" class="media" title="procedure_return_types.htm"><img src="/lib/exe/fetch.php?media=btn_next_n.gif" class="media" title="Next page" alt="Next page" /></a> </td>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign" colspan="2">  </td>
	</tr>
</table></div>

<p>
<strong>Topics in this help section:</strong>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#generalsyntax" class="wikilink1" title="prototype_parameter_lists.htm">General Syntax</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#valueparameter" class="wikilink1" title="prototype_parameter_lists.htm">Value Parameters</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#variableparameters" class="wikilink1" title="prototype_parameter_lists.htm">Variable Parameters</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#passingarrays" class="wikilink1" title="prototype_parameter_lists.htm">Passing Arrays</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#pudt" class="wikilink1" title="prototype_parameter_lists.htm">Parameters of Unspecified Data Type</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#entityparams" class="wikilink1" title="prototype_parameter_lists.htm">Entity Parameters</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#procparms" class="wikilink1" title="prototype_parameter_lists.htm">Procedure Parameters</a></span>
</p>

<p>
<span class="curid"><a href="/doku.php?id=prototype_parameter_lists.htm#passnamedgroups" class="wikilink1" title="prototype_parameter_lists.htm">Passing Named GROUPs, QUEUEs, and CLASSes</a></span>
</p>

<p>
<em class="u"><strong>General Syntax</strong></em>
</p>

<p>
<strong>[CONST]</strong> <strong>[REF]</strong> <em>type </em>[ <em>label </em>]
</p>

<p>
&lt;;<strong>[CONST] [REF]</strong><em> type </em>[ <em>label </em>] <em>&gt;</em>
</p>

<p>
<em>type </em>[ <em>label </em>] <em>= default</em>
</p>

<p>
<a href="/lib/exe/detail.php?id=prototype_parameter_lists.htm&amp;media=blk2blue.jpg" class="media" title="blk2blue.jpg"><img src="/lib/exe/fetch.php?media=blk2blue.jpg" class="media" title="blk2blue.jpg" alt="blk2blue.jpg" /></a>
</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>CONST</strong> </td><td class="col1"> An optional qualifier for the parameter which is valid only on a variable-parameter. This means that the parameter being passed by address may not be updated in the procedure. It is treated as if it were a constant value. </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>REF</strong><a href="/lib/exe/detail.php?id=prototype_parameter_lists.htm&amp;media=newcnet.jpg" class="media" title="newcnet.jpg"><img src="/lib/exe/fetch.php?media=newcnet.jpg" class="media" title="NewCNet.jpg" alt="NewCNet.jpg" /></a> </td><td class="col1"> The<strong> REF</strong> keyword is added to Clarion# to provide compatibility with other .NET languages. It&#039;s used to mark a parameter as “passed by reference”. The REF keyword can be used before the type name in the parameter declaration. </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <em>type</em> </td><td class="col1"> The data type of the parameter. This may be a value-parameter, variable-parameter, array, unspecified data type, entity, procedure-parameter, or a named GROUP, QUEUE, or CLASS. </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <em>label</em> </td><td class="col1"> An optional documentary label for the parameter. This label is not required and is placed in the prototype for documentation purposes only. </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <em>&lt;; &gt;</em> </td><td class="col1"> Angle brackets indicate the parameter is omittable. The OMITTED procedure detects the omission. All parameter <em>types</em> can be omitted. </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <em>= default</em> </td><td class="col1"> A <em>default</em> value indicates the numeric parameter is omittable, and if omitted, the <em>default</em> value is passed. The OMITTED procedure will not detect the omission–a value is passed. Valid only on simple numeric <em>types</em>. </td>
	</tr>
</table></div>

<p>
The <em>parameter list</em> in a PROCEDURE prototype is a comma-delimited list of the data <em>types</em> to pass to the PROCEDURE. The entire <em>parameter list</em> is enclosed in the parentheses following the PROCEDURE keyword (or the <em>name)</em>. Each parameter&#039;s <em>type</em> may be followed by a space then a valid Clarion <em>label</em> for the parameter (which is ignored by the compiler and only documents the purpose of the parameter). Each numeric value-parameter (passed by value) may also include an assignment of a constant value to the <em>type</em> (or the documentary <em>label</em>, if present) that defines the default value to pass if the parameter is omitted.
</p>

<p>
Any parameter that may be omitted when the PROCEDURE is called must be included in the prototype&#039;s <em>parameter list</em> and enclosed in angle brackets ( &lt;; &gt; ) unless a <em>default</em> value is defined for the parameter. The OMITTED procedure allows you to test for unpassed parameters at runtime (except those parameters which have a <em>default</em> value).
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>  MODULE(&#039;Test&#039;)</strong>
</p>

<p>
<strong>MyProc1 PROCEDURE(</strong><strong>LONG</strong><strong>)                     !LONG value-parameter</strong>
</p>

<p>
<strong>MyProc2 PROCEDURE(</strong><strong>&lt;;LONG&gt;</strong><strong>)                   !Omittable LONG value-parameter</strong>
</p>

<p>
<strong>MyProc3 PROCEDURE(</strong><strong>LONG=23</strong><strong>)                  !Passes 23 if omitted</strong>
</p>

<p>
<strong>MyProc4 PROCEDURE(</strong><strong>LONG Count</strong><strong>, </strong><strong>REAL Sum</strong><strong>)     !LONG passing a Count and REAL passing a Sum</strong>
</p>

<p>
<strong>MyProc5 PROCEDURE(</strong><strong>LONG Count=1</strong><strong>, </strong><strong>REAL Sum=0</strong><strong>) !Count defaults to 1 and Sum to 0</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>See Also:</strong>
</p>

<p>
<a href="/doku.php?id=map_declare_procedure_prototypes_.htm" class="wikilink1" title="map_declare_procedure_prototypes_.htm">MAP</a>
</p>

<p>
<a href="/doku.php?id=member_identify_member_source_file_.htm" class="wikilink1" title="member_identify_member_source_file_.htm">MEMBER</a>
</p>

<p>
<a href="/doku.php?id=module_specify_member_source_file_.htm" class="wikilink1" title="module_specify_member_source_file_.htm">MODULE</a>
</p>

<p>
<a href="/doku.php?id=procedure_define_a_procedure_.htm" class="wikilink1" title="procedure_define_a_procedure_.htm">PROCEDURE</a>
</p>

<p>
<a href="/doku.php?id=class_object_declaration_.htm" class="wikilink1" title="class_object_declaration_.htm">CLASS</a>
</p>

<p>
<a href="/doku.php?id=ref_parameter_passed_by_reference_.htm" class="wikilink1" title="ref_parameter_passed_by_reference_.htm">REF</a>
</p>

<p>
<strong>Value-parameters</strong>
</p>

<p>
Value-parameters are “passed by value.” A copy of the variable passed in the parameter list of the “calling” PROCEDURE is used in the “called” PROCEDURE. The “called” PROCEDURE cannot change the value of the variable passed to it by the “caller.” Simple assignment data conversion rules apply; Value-parameters actually passed are converted to the data type in the PROCEDURE prototype. Valid value-parameters are:
</p>
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>BYTE</strong> </td><td class="col1"> <strong>SHORT</strong> </td><td class="col2"> <strong>USHORT</strong> </td><td class="col3"> <strong>LONG</strong> </td><td class="col4"> <strong>ULONG</strong> </td><td class="col5"> <strong>SREAL</strong> </td><td class="col6"> <strong>REAL</strong> </td><td class="col7"> <strong>DATE</strong> </td><td class="col8"> <strong>TIME</strong> </td><td class="col9"> <strong>STRING</strong> </td>
	</tr>
</table></div>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>  MODULE(&#039;Test&#039;)</strong>
</p>

<p>
<strong>MyProc1 PROCEDURE(</strong><strong>LONG</strong><strong>)                       !LONG value-parameter</strong>
</p>

<p>
<strong>MyProc2 PROCEDURE(</strong><strong>&lt;;LONG&gt;</strong><strong>)                     !Omittable LONG value-parameter</strong>
</p>

<p>
<strong>MyProc3 PROCEDURE(</strong><strong>LONG=23</strong><strong>)                    !Passes 23 if omitted</strong>
</p>

<p>
<strong>MyProc4 PROCEDURE(</strong><strong>LONG Count, REAL Sum</strong><strong>)       !LONG passing a Count and REAL passing a Sum</strong>
</p>

<p>
<strong>MyProc5 PROCEDURE(</strong><strong>LONG Count=1, REAL Sum=0</strong><strong>)   !Count defaults to 1 and Sum to 0</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong>  MODULE(&#039;Party3.Obj&#039;)    </strong>
</p>

<p>
<strong>Func48 PROCEDURE(</strong><strong>REAL</strong><strong>),REAL,PASCAL            !PASCAL calling convention</strong>
</p>

<p>
<strong>Func49 PROCEDURE(</strong><strong>SREAL</strong><strong>),REAL,C,NAME(&#039;_func49&#039;)!C convention and external function name</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>Variable-parameters</strong>
</p>

<p>
<strong>Variable-parameters</strong> are “passed by address.” A variable passed by address has only one memory address. Changing the value of the variable in the “called” PROCEDURE also changes its value in the “caller.” Variable-parameters are listed by data type with a leading asterisk (*) in the PROCEDURE prototype in the MAP. Valid variable-parameters are:
</p>
<div class="table sectionedit4"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>*BYTE</strong> </td><td class="col1"> <strong>*SHORT</strong> </td><td class="col2"> <strong>*USHORT</strong> </td><td class="col3"> <strong>*LONG</strong> </td><td class="col4"> <strong>*ULONG</strong> </td><td class="col5"> <strong>*SREAL</strong> </td><td class="col6"> <strong>*REAL</strong> </td><td class="col7"> <strong>*BFLOAT4</strong> </td><td class="col8"> <strong>*BFLOAT8</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>*DECIMAL</strong> </td><td class="col1"> <strong>*PDECIMAL</strong> </td><td class="col2"> <strong>*DATE</strong> </td><td class="col3"> <strong>*TIME</strong> </td><td class="col4"> <strong>*STRING</strong> </td><td class="col5"> <strong>*PSTRING</strong> </td><td class="col6"> <strong>*CSTRING</strong> </td><td class="col7"> <strong>*GROUP</strong> </td><td class="col8"> *USTRING </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <strong>*BSTRING</strong> </td><td class="col1"> <strong>*INT64</strong> </td><td class="col2"> <strong>*UINT64</strong> </td><td class="col3"> <strong>*VARIANT</strong> </td><td class="col4 leftalign">  </td><td class="col5 leftalign">  </td><td class="col6 leftalign">  </td><td class="col7 leftalign">  </td><td class="col8 leftalign">  </td>
	</tr>
</table></div>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>  MODULE(&#039;Test&#039;)</strong>
</p>

<p>
<strong>MyProc2 PROCEDURE(</strong><strong>&lt;;*LONG&gt;</strong><strong>)               !Omittable LONG variable-parameter</strong>
</p>

<p>
<strong>MyFunc1 PROCEDURE(</strong><strong>*SREAL</strong><strong>),REAL,C         !SREAL variable-parameter, REAL return, C call conv</strong>
</p>

<p>
<strong>MyProc6 PROCEDURE(</strong><strong>CONST *CSTRING Value</strong><strong>)  !Value retains a constant value in procedure</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong>  MODULE(&#039;Party3.Obj&#039;)    </strong>
</p>

<p>
<strong>Func4  PROCEDURE(</strong><strong>*CSTRING</strong><strong>),REAL,C,RAW    !Pass CSTRING address-only to C function</strong>
</p>

<p>
<strong>Func47 PROCEDURE(</strong><strong>*CSTRING</strong><strong>),CSTRING,C,RAW !Returns pointer to a CSTRING</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>Passing Arrays</strong>
</p>

<p>
To pass an entire array as a parameter, the prototype must declare the array&#039;s data type as a Variable-parameter (“passed by address”) with an empty subscript list. If the array has more than one dimension, commas (as position holders) must indicate the number of dimensions in the array. The calling statement must pass the entire array to the PROCEDURE, not just one element.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>MainProc PROCEDURE</strong>
</p>

<p>
<strong>AddCount PROCEDURE(</strong><strong>*LONG[,]</strong><strong> Total,</strong><strong>*LONG[,]</strong><strong> Current)  !Passing two 2-dimensional arrays</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MainProc                                            !Call first procedure</strong>
</p>

<p>
<strong>MainProc PROCEDURE</strong>
</p>

<p>
<strong>TotalCount LONG,DIM(10,10)</strong>
</p>

<p>
<strong>CurrentCnt LONG,DIM(10,10)</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> AddCount(TotalCount,CurrentCnt)                     !Call the procedure passing the arrays</strong>
</p>

<p>
<strong>AddCount PROCEDURE(*LONG[,] Total,*LONG[,] Current)  !Procedure expects two arrays</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> LOOP I# = 1 TO MAXIMUM(Total,1)                     !Loop through first subscript</strong>
</p>

<p>
<strong>  LOOP J# = 1 TO MAXIMUM(Total,2)                    !Loop through second subscript</strong>
</p>

<p>
<strong>   Total[I#,J#] += Current[I#,J#]                    !increment TotalCount from CurrentCnt</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong> CLEAR(Current)                                      !Clear CurrentCnt array</strong>
</p>

<p>
<strong>Parameters of Unspecified Data Type</strong>
</p>

<p>
You can write general purpose procedures which perform operations on passed parameters where the exact data type of the parameter may vary from one call to the next by using <strong>untyped value-parameters</strong> and <strong>untyped variable-parameters</strong>. These are polymorphic parameters; they may become any other simple data type depending upon the data type passed to the procedure.
</p>

<p>
<strong>Untyped value-parameters</strong> are represented in the prototype with a question mark (?). When the procedure executes, the parameter is dynamically typed and acts as a data object of the base type (LONG, DECIMAL, STRING, or REAL) of the passed variable, or the base type of whatever it was last assigned. This means that the “assumed” data type of the parameter can change within the PROCEDURE, allowing it to be treated as any data type.
</p>

<p>
An untyped value-parameter is “passed by value” to the PROCEDURE and its assumed data type is handled by Clarion&#039;s automatic Data Conversion Rules. Data types which may be passed as untyped value-parameters:
</p>
<div class="table sectionedit5"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>BYTE</strong> </td><td class="col1"> <strong>SHORT</strong> </td><td class="col2"> <strong>USHORT</strong> </td><td class="col3"> <strong>LONG</strong> </td><td class="col4"> <strong>ULONG</strong> </td><td class="col5"> <strong>SREAL</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>REAL</strong> </td><td class="col1"> <strong>BFLOAT4</strong> </td><td class="col2"> <strong>BFLOAT8</strong> </td><td class="col3"> <strong>DECIMAL</strong> </td><td class="col4"> <strong>PDECIMAL</strong> </td><td class="col5"> <strong>DATE</strong> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <strong>TIME</strong> </td><td class="col1"> <strong>STRING</strong> </td><td class="col2"> <strong>PSTRING</strong> </td><td class="col3"> <strong>CSTRING</strong> </td><td class="col4"> <strong>USTRING</strong> </td><td class="col5"> <strong>BSTRING</strong> </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <strong>GROUP(treated as a STRING)</strong> </td><td class="col1"> <strong>Untyped value-parameter(?)</strong> </td><td class="col2"> <strong>Untyped Variable-parameter (*?)</strong> </td><td class="col3 leftalign">  </td><td class="col4 leftalign">  </td><td class="col5 leftalign">  </td>
	</tr>
</table></div>

<p>
The RAW attribute is valid for use if the untyped value-parameter (?) is being passed to external library functions written in other languages than Clarion. This converts the data to a LONG then passes the data as a C/C++ “void *” parameter (which eliminates “type inconsistency” warnings).
</p>

<p>
<strong>Untyped variable-parameters</strong> are represented in the PROCEDURE prototype with an asterisk and a question mark (*?). Within the procedure, the parameter acts as a data object of the type of the variable passed in at runtime. This means the data type of the parameter is fixed during the execution of the PROCEDURE.
</p>

<p>
An untyped variable-parameter is “passed by address” to the PROCEDURE. Therefore, any changes made to the passed parameter within the PROCEDURE are made directly to the variable which was passed in. This allows you to write polymorphic procedures.
</p>

<p>
Within a procedure which receives an untyped variable-parameter, it is not safe to make any assumptions about the data type coming in. The danger of making assumptions is the possiblity of assigning an out-of-range value which the variable&#039;s actual data type cannot handle. If this happens, the result may be disastrously different from that expected. <strong>See Also:</strong> ANY<a href="/doku.php?id=any_any_simple_data_type_.htm" class="wikilink1" title="any_any_simple_data_type_.htm">ANY (any simple data type)</a>
</p>

<p>
Data types which may be passed as untyped variable-parameters:
</p>
<div class="table sectionedit6"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>BYTE</strong> </td><td class="col1"> <strong>SHORT</strong> </td><td class="col2"> <strong>USHORT</strong> </td><td class="col3"> <strong>LONG</strong> </td><td class="col4"> <strong>ULONG</strong> </td><td class="col5"> <strong>SREAL</strong> </td><td class="col6"> <strong>REAL</strong> </td><td class="col7"> <strong>BFLOAT4</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>BFLOAT8</strong> </td><td class="col1"> <strong>DECIMAL</strong> </td><td class="col2"> <strong>PDECIMAL</strong> </td><td class="col3"> <strong>DATE</strong> </td><td class="col4"> <strong>TIME</strong> </td><td class="col5"> <strong>STRING</strong> </td><td class="col6"> <strong>PSTRING</strong> </td><td class="col7"> <strong>CSTRING</strong> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <strong>Untyped variable-parameter (*?)</strong> </td><td class="col1"> <strong>USTRING</strong> </td><td class="col2"> <strong>BSTRING</strong> </td><td class="col3 leftalign">  </td><td class="col4 leftalign">  </td><td class="col5 leftalign">  </td><td class="col6 leftalign">  </td><td class="col7 leftalign">  </td>
	</tr>
</table></div>

<p>
The RAW attribute is valid for use if the untyped variable-parameter (*?) is being passed to external library functions written in other languages than Clarion. This has the same effect as passing a C or C++ “void *” parameter.
</p>

<p>
Arrays may not be passed as either kind of untyped parameter.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> PROGRAM</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>Proc1 PROCEDURE(</strong><strong>?</strong><strong>)          !Untyped value-parameter</strong>
</p>

<p>
<strong>Proc2 PROCEDURE(</strong><strong>*?</strong><strong>)         !Untyped variable-parameter</strong>
</p>

<p>
<strong>Proc3 PROCEDURE(</strong><strong>*?</strong><strong>)         !Untyped variable-parameter (set to crash)</strong>
</p>

<p>
<strong>Max   PROCEDURE</strong><strong>(?,?),?</strong><strong>      !Procedure returning Untyped value-parameter</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>GlobalVar1  BYTE(3)         !BYTE initialized to 3</strong>
</p>

<p>
<strong>GlobalVar2  DECIMAL(8,2,3)</strong>
</p>

<p>
<strong>GlobalVar3  DECIMAL(8,1,3)</strong>
</p>

<p>
<strong>MaxInteger  LONG</strong>
</p>

<p>
<strong>MaxString   STRING(255)</strong>
</p>

<p>
<strong>MaxFloat    REAL</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> Proc1(GlobalVar1)          !Pass in a BYTE, value is 3</strong>
</p>

<p>
<strong> Proc2(GlobalVar2)          !Pass it a DECIMAL(8,2), value is 3.00 - it prints 3.33</strong>
</p>

<p>
<strong> Proc2(GlobalVar3)          !Pass it a DECIMAL(8,1), value is 3.0 - it prints 3.3</strong>
</p>

<p>
<strong> Proc3(GlobalVar1)          !Pass it a BYTE and watch it crash</strong>
</p>

<p>
<strong> MaxInteger = Max(1,5)      !Max procedure returns the 5</strong>
</p>

<p>
<strong> MaxString = Max(&#039;Z&#039;,&#039;A&#039;)   !Max procedure returns the &#039;Z&#039;</strong>
</p>

<p>
<strong> MaxFloat = Max(1.3,1.25)   !Max procedure returns the 1.3</strong>
</p>

<p>
<strong>Proc1 PROCEDURE(? ValueParm)</strong>
</p>

<p>
<strong> CODE                       !ValueParm starts at 3 and is a LONG</strong>
</p>

<p>
<strong> ValueParm = ValueParm &amp;amp; ValueParm  !Now Contains &#039;33&#039; and is a STRING</strong>
</p>

<p>
<strong> ValueParm = ValueParm / 10         !Now Contains 3.3 and is a REAL</strong>
</p>

<p>
<strong>Proc2 PROCEDURE(*? VariableParm)</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> VariableParm = 10 / 3              !Assign 3.33333333… to passed variable</strong>
</p>

<p>
<strong>Proc3 PROCEDURE(*? VariableParm)</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> LOOP</strong>
</p>

<p>
<strong>  IF VariableParm &gt;= 256 THEN BREAK. !If passed a BYTE, BREAK will never happen</strong>
</p>

<p>
<strong>  VariableParm += 10</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>Max PROCEDURE(Val1,Val2)            !Find the larger of two passed values</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> IF Val1 &gt; Val2                     !Check first value against second</strong>
</p>

<p>
<strong>  RETURN(Val1)                      ! return first, if largest</strong>
</p>

<p>
<strong> ELSE                               !otherwise</strong>
</p>

<p>
<strong>  RETURN(Val2)                      ! return the second</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>See Also:</strong>
</p>

<p>
<a href="/doku.php?id=map_declare_procedure_prototypes_.htm" class="wikilink1" title="map_declare_procedure_prototypes_.htm">MAP</a>
</p>

<p>
<a href="/doku.php?id=member_identify_member_source_file_.htm" class="wikilink1" title="member_identify_member_source_file_.htm">MEMBER</a>
</p>

<p>
<a href="/doku.php?id=module_specify_member_source_file_.htm" class="wikilink1" title="module_specify_member_source_file_.htm">MODULE</a>
</p>

<p>
<a href="/doku.php?id=procedure_define_a_procedure_.htm" class="wikilink1" title="procedure_define_a_procedure_.htm">PROCEDURE</a>
</p>

<p>
<a href="/doku.php?id=class_object_declaration_.htm" class="wikilink1" title="class_object_declaration_.htm">CLASS</a>
</p>

<p>
<strong>Entity-parameters</strong>
</p>

<p>
<strong>Entity-parameters</strong> pass the name of a data structure to the “called” PROCEDURE. Passing the entity allows the “called” PROCEDURE to use those Clarion commands that require the label of the structure as a parameter. Entity-parameters are listed by entity type in the PROCEDURE prototype in the MAP. Entity-parameters are always “passed by address.” Valid entity-parameters are:
</p>
<div class="table sectionedit7"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>FILE</strong> </td><td class="col1"> <strong>VIEW</strong> </td><td class="col2"> <strong>KEY</strong> </td><td class="col3"> <strong>INDEX</strong> </td><td class="col4"> <strong>QUEUE</strong> </td><td class="col5"> <strong>WINDOW</strong> </td><td class="col6"> <strong>REPORT</strong> </td><td class="col7"> <strong>BLOB</strong> </td>
	</tr>
</table></div>

<p>
A REPORT can be passed as the parameter to a procedure prototyped to receive a WINDOW, since internally they use the same passing structure.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>  MODULE(&#039;Test&#039;) </strong>
</p>

<p>
<strong>MyFunc2  PROCEDURE(</strong><strong>FILE</strong><strong>),STRING      !FILE entity-parameter, returning a STRING</strong>
</p>

<p>
<strong>ProcType PROCEDURE(</strong><strong>FILE</strong><strong>),TYPE        !Procedure-parameter type definition</strong>
</p>

<p>
<strong>MyFunc4  PROCEDURE(</strong><strong>FILE</strong><strong>),STRING,PROC !May be called as a procedure without warnings</strong>
</p>

<p>
<strong>MyProc6  PROCEDURE(</strong><strong>FILE</strong><strong>),PRIVATE     !May only be called by other procs in TEST.CLW</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>Procedure-parameters</strong>
</p>

<p>
<strong>Procedure-parameters</strong> pass the name of another PROCEDURE to the “called” PROCEDURE. Procedure-parameters are listed by the name of a prototype of the same type in the PROCEDURE prototype in the MAP (which may or may not have the TYPE attribute). When called in executable code, the “called” PROCEDURE must be passed the name of a PROCEDURE whose prototype is exactly the same as the procedure named in the “called” procedure&#039;s prototype.
</p>

<p>
Each parameter in the list may be followed by a valid Clarion label which is completely ignored by the compiler. This label is used only to document the parameter to make the prototype more readable, or to duplicate the PROCEDURE definition statement. Each passed parameter&#039;s definition may also include the assignment of a constant value to the data type (or the documentary label, if present) that defines the default value to pass if the parameter is omitted.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong> MAP</strong>
</p>

<p>
<strong>  MODULE(&#039;Test&#039;)</strong>
</p>

<p>
<strong>ProcType PROCEDURE(FILE),TYPE       !Procedure-parameter type definition</strong>
</p>

<p>
<strong>MyFunc3  PROCEDURE(</strong><strong>ProcType</strong><strong>),STRING !ProcType procedure-parameter, returning a STRING,</strong>
</p>

<p>
<strong>  END                               !must be passed a procedure that takes a FILE</strong>
</p>

<p>
<strong> END                                !as a parameter</strong>
</p>

<p>
<strong>Passing Named GROUPs, QUEUEs, and CLASSes</strong>
</p>

<p>
Passing a GROUP as a Variable-Parameter, or a QUEUE as an Entity-Parameter, to a PROCEDURE does not allow you to reference the component fields within the structure in the receiving PROCEDURE . You can alternatively pass a “named” GROUP or QUEUE to achieve this. You may also name a CLASS in the same manner to allow the receiving procedure to access the public data members and methods of the CLASS.
</p>

<p>
To reference the component fields within the structure, place the label of a GROUP, QUEUE, or CLASS structure in the receiving PROCEDURE&#039;s prototype<em> parameter list </em>as the data type for the parameter<em>. </em>This passes the parameter “by address” and allows the receiving procedure to reference the component fields of the structure (and the public methods of a CLASS pass in this manner).
</p>

<p>
The data actually passed as the parameter must always have a similar structure (defined with the same data types) for its component fields. The GROUP or QUEUE actually passed can be a “superset” of the named parameter, as long as the first fields in the “superset” group are the same as the GROUP or QUEUE named in the prototype. The actually passed CLASS object can also be a derived class of the CLASS named in the prototype. The “extra” fields in the passed GROUP, QUEUE, or CLASS are not available for use in the receiving procedure.
</p>

<p>
The GROUP, QUEUE, or CLASS named in the <em>parameter list </em>does not need to have the TYPE attribute, and does not have to be declared before the procedure&#039;s prototype, but it must be declared before the PROCEDURE that will receive the parameter is called. This is the only instance in the Clarion language where the compiler allows such a “forward reference.”
</p>

<p>
Use Field Qualification syntax to reference the members of the passed group in the receiving procedure (LocalName.MemberName). The member fields of the structure are referenced by the labels given them in the group named as the data type in the prototype–not the labels of the fields in the structure actually passed in. This allows the receiving procedure to be completely generic, regardless of what actual data structure is passed to it.
</p>

<p>
<strong>Example:</strong>
</p>

<p>
<strong>   PROGRAM</strong>
</p>

<p>
<strong>   MAP</strong>
</p>

<p>
<strong>MyProc PROCEDURE</strong>
</p>

<p>
<strong>AddQue PROCEDURE(PassGroup PassedGroup, NameQue PassedQue)</strong>
</p>

<p>
<strong>   END          !AddQue receives a GROUP defined like PassGroup and </strong>
</p>

<p>
<strong>                ! a QUEUE defined like NameQue</strong>
</p>

<p>
<strong>PassGroup  GROUP,TYPE   !Type definition – no memory allocated</strong>
</p>

<p>
<strong>F1          STRING(20)  !  GROUP with 2 STRING(20) fields</strong>
</p>

<p>
<strong>F2          STRING(20)</strong>
</p>

<p>
<strong>           END    </strong>
</p>

<p>
<strong>NameGroup  GROUP        !Name group</strong>
</p>

<p>
<strong>First       STRING(20)  !first name</strong>
</p>

<p>
<strong>Last        STRING(20)  !last name</strong>
</p>

<p>
<strong>Company     STRING(30)  !This extra field is not available to the receiving </strong>
</p>

<p>
<strong>           END          !procedure (AddQue) since PassGroup only has two fields </strong>
</p>

<p>
<strong>NameQue   QUEUE,TYPE    !Name Queue, Type definition – no memory allocated</strong>
</p>

<p>
<strong>First      STRING(20)</strong>
</p>

<p>
<strong>Last      STRING(20)</strong>
</p>

<p>
<strong>       END</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> MyProc</strong>
</p>

<p>
<strong>MyProc   PROCEDURE</strong>
</p>

<p>
<strong>LocalQue  NameQue       !Local Name Queue, declared exactly the same as NameQue</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> NameGroup.First = &#039;Fred&#039;</strong>
</p>

<p>
<strong> NameGroup.Last = &#039;Flintstone&#039;</strong>
</p>

<p>
<strong> AddQue(NameGroup,LocalQue)          !Pass NameGroup and LocalQue to AddQue procedure</strong>
</p>

<p>
<strong> NameGroup.First = &#039;Barney&#039;</strong>
</p>

<p>
<strong> NameGroup.Last = &#039;Rubble&#039;</strong>
</p>

<p>
<strong> AddQue(NameGroup,LocalQue)</strong>
</p>

<p>
<strong> NameGroup.First = &#039;George&#039;</strong>
</p>

<p>
<strong> NameGroup.Last = &#039;O&#039;&#039;Jungle&#039;</strong>
</p>

<p>
<strong> AddQue(NameGroup,LocalQue)</strong>
</p>

<p>
<strong> LOOP X# = 1 TO RECORDS(LocalQue)    !Look at what&#039;s in the LocalQue now</strong>
</p>

<p>
<strong>  GET(LocalQue,X#)</strong>
</p>

<p>
<strong>  MESSAGE(CLIP(LocalQue.First) &amp;amp; &#039; &#039; &amp;amp; LocalQue.Last)</strong>
</p>

<p>
<strong> END</strong>
</p>

<p>
<strong>AddQue  PROCEDURE(PassGroup PassedGroup, NameQue PassedQue)</strong>
</p>

<p>
<strong> CODE</strong>
</p>

<p>
<strong> PassedQue.First = PassedGroup.F1    !Effectively:  LocalQue.First = NameGroup.First</strong>
</p>

<p>
<strong> PassedQue.Last  = PassedGroup.F2    !Effectively:  LocalQue.Last = NameGroup.Last</strong>
</p>

<p>
<strong> ADD(PassedQue)                      !Add an entry into the PassedQue (LocalQue)</strong>
</p>

<p>
<strong> ASSERT(NOT ERRORCODE())</strong>
</p>

<p>
<strong>See Also:</strong>
</p>

<p>
<a href="/doku.php?id=map_declare_procedure_prototypes_.htm" class="wikilink1" title="map_declare_procedure_prototypes_.htm">MAP</a>
</p>

<p>
<a href="/doku.php?id=member_identify_member_source_file_.htm" class="wikilink1" title="member_identify_member_source_file_.htm">MEMBER</a>
</p>

<p>
<a href="/doku.php?id=module_specify_member_source_file_.htm" class="wikilink1" title="module_specify_member_source_file_.htm">MODULE</a>
</p>

<p>
<a href="/doku.php?id=procedure_define_a_procedure_.htm" class="wikilink1" title="procedure_define_a_procedure_.htm">PROCEDURE</a>
</p>

<p>
<a href="/doku.php?id=class_object_declaration_.htm" class="wikilink1" title="class_object_declaration_.htm">CLASS</a>
</p>

                    <!-- wikipage stop -->
                                    </div>

                <div class="docInfo"><bdi>prototype_parameter_lists.htm.txt</bdi> · Last modified: 2021/04/15 15:57 (external edit)</div>

                            </div></div><!-- /content -->

            <hr class="a11y" />

            <!-- PAGE ACTIONS -->
            <div id="dokuwiki__pagetools">
                <h3 class="a11y">Page Tools</h3>
                <div class="tools">
                    <ul>
                        <li class="source"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=edit" title="Show pagesource [v]" rel="nofollow" accesskey="v"><span>Show pagesource</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 9h5.5L13 3.5V9M6 2h8l6 6v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4c0-1.11.89-2 2-2m.12 13.5l3.74 3.74 1.42-1.41-2.33-2.33 2.33-2.33-1.42-1.41-3.74 3.74m11.16 0l-3.74-3.74-1.42 1.41 2.33 2.33-2.33 2.33 1.42 1.41 3.74-3.74z"/></svg></a></li><li class="revs"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=revisions" title="Old revisions [o]" rel="nofollow" accesskey="o"><span>Old revisions</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M11 7v5.11l4.71 2.79.79-1.28-4-2.37V7m0-5C8.97 2 5.91 3.92 4.27 6.77L2 4.5V11h6.5L5.75 8.25C6.96 5.73 9.5 4 12.5 4a7.5 7.5 0 0 1 7.5 7.5 7.5 7.5 0 0 1-7.5 7.5c-3.27 0-6.03-2.09-7.06-5h-2.1c1.1 4.03 4.77 7 9.16 7 5.24 0 9.5-4.25 9.5-9.5A9.5 9.5 0 0 0 12.5 2z"/></svg></a></li><li class="backlink"><a href="/doku.php?id=prototype_parameter_lists.htm&amp;do=backlink" title="Backlinks" rel="nofollow"><span>Backlinks</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10.59 13.41c.41.39.41 1.03 0 1.42-.39.39-1.03.39-1.42 0a5.003 5.003 0 0 1 0-7.07l3.54-3.54a5.003 5.003 0 0 1 7.07 0 5.003 5.003 0 0 1 0 7.07l-1.49 1.49c.01-.82-.12-1.64-.4-2.42l.47-.48a2.982 2.982 0 0 0 0-4.24 2.982 2.982 0 0 0-4.24 0l-3.53 3.53a2.982 2.982 0 0 0 0 4.24m2.82-4.24c.39-.39 1.03-.39 1.42 0a5.003 5.003 0 0 1 0 7.07l-3.54 3.54a5.003 5.003 0 0 1-7.07 0 5.003 5.003 0 0 1 0-7.07l1.49-1.49c-.01.82.12 1.64.4 2.43l-.47.47a2.982 2.982 0 0 0 0 4.24 2.982 2.982 0 0 0 4.24 0l3.53-3.53a2.982 2.982 0 0 0 0-4.24.973.973 0 0 1 0-1.42z"/></svg></a></li><li class="top"><a href="#dokuwiki__top" title="Back to top [t]" rel="nofollow" accesskey="t"><span>Back to top</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 20h-2V8l-5.5 5.5-1.42-1.42L12 4.16l7.92 7.92-1.42 1.42L13 8v12z"/></svg></a></li>                    </ul>
                </div>
            </div>
        </div><!-- /wrapper -->

        
<!-- ********** FOOTER ********** -->
<div id="dokuwiki__footer"><div class="pad">
    <div class="license">Except where otherwise noted, content on this wiki is licensed under the following license: <bdi><a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license" class="urlextern">CC Attribution-Share Alike 4.0 International</a></bdi></div>
    <div class="buttons">
        <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"><img src="/lib/images/license/button/cc-by-sa.png" alt="CC Attribution-Share Alike 4.0 International" /></a>        <a href="https://www.dokuwiki.org/donate" title="Donate" ><img
            src="/lib/tpl/dokuwiki/images/button-donate.gif" width="80" height="15" alt="Donate" /></a>
        <a href="https://php.net" title="Powered by PHP" ><img
            src="/lib/tpl/dokuwiki/images/button-php.gif" width="80" height="15" alt="Powered by PHP" /></a>
        <a href="//validator.w3.org/check/referer" title="Valid HTML5" ><img
            src="/lib/tpl/dokuwiki/images/button-html5.png" width="80" height="15" alt="Valid HTML5" /></a>
        <a href="//jigsaw.w3.org/css-validator/check/referer?profile=css3" title="Valid CSS" ><img
            src="/lib/tpl/dokuwiki/images/button-css.png" width="80" height="15" alt="Valid CSS" /></a>
        <a href="https://dokuwiki.org/" title="Driven by DokuWiki" ><img
            src="/lib/tpl/dokuwiki/images/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" /></a>
    </div>
</div></div><!-- /footer -->

    </div></div><!-- /site -->

    <div class="no"><img src="/lib/exe/indexer.php?id=prototype_parameter_lists.htm&amp;1631826397" width="2" height="1" alt="" /></div>
    <div id="screen__mode" class="no"></div></body>
</html>
