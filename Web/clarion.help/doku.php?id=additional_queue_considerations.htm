<!DOCTYPE html>
<html lang="en" dir="ltr" class="no-js">
<head>
    <meta charset="utf-8" />
    <title>additional_queue_considerations.htm [Clarion Community Help]</title>
    <script>(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
    <meta name="generator" content="DokuWiki"/>
<meta name="theme-color" content="#008800"/>
<meta name="robots" content="index,follow"/>
<meta name="keywords" content="additional_queue_considerations.htm"/>
<link rel="search" type="application/opensearchdescription+xml" href="/lib/exe/opensearch.php" title="Clarion Community Help"/>
<link rel="start" href="/"/>
<link rel="contents" href="/doku.php?id=additional_queue_considerations.htm&amp;do=index" title="Sitemap"/>
<link rel="manifest" href="/lib/exe/manifest.php"/>
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/feed.php"/>
<link rel="alternate" type="application/rss+xml" title="Current namespace" href="/feed.php?mode=list&amp;ns="/>
<link rel="alternate" type="text/html" title="Plain HTML" href="/doku.php?do=export_xhtml&amp;id=additional_queue_considerations.htm"/>
<link rel="alternate" type="text/plain" title="Wiki Markup" href="/doku.php?do=export_raw&amp;id=additional_queue_considerations.htm"/>
<link rel="canonical" href="http://clarion.help/doku.php?id=additional_queue_considerations.htm"/>
<link rel="stylesheet" type="text/css" href="/lib/exe/css.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"/>
<!--[if gte IE 9]><!-->
<script type="text/javascript">/*<![CDATA[*/var NS='';var JSINFO = {"id":"additional_queue_considerations.htm","namespace":"","ACT":"show","useHeadingNavigation":0,"useHeadingContent":0};
/*!]]>*/</script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/jquery.php?tseed=23f888679b4f1dc26eef34902aca964f"></script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/js.php?t=dokuwiki&amp;tseed=6c87f37cf2e26d7e09fa69b644b48db6"></script>
<!--<![endif]-->
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="shortcut icon" href="/lib/tpl/dokuwiki/images/favicon.ico" />
<link rel="apple-touch-icon" href="/lib/tpl/dokuwiki/images/apple-touch-icon.png" />
    </head>

<body>
    <div id="dokuwiki__site"><div id="dokuwiki__top" class="site dokuwiki mode_show tpl_dokuwiki     ">

        
<!-- ********** HEADER ********** -->
<div id="dokuwiki__header"><div class="pad group">

    
    <div class="headings group">
        <ul class="a11y skip">
            <li><a href="#dokuwiki__content">skip to content</a></li>
        </ul>

        <h1><a href="/doku.php?id=start"  accesskey="h" title="[H]"><img src="/lib/exe/fetch.php?media=logo.png" width="354" height="103" alt="" /> <span>Clarion Community Help</span></a></h1>
            </div>

    <div class="tools group">
        <!-- USER TOOLS -->
                    <div id="dokuwiki__usertools">
                <h3 class="a11y">User Tools</h3>
                <ul>
                    <li class="action login"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=login&amp;sectok=" title="Log In" rel="nofollow"><span>Log In</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10 17.25V14H3v-4h7V6.75L15.25 12 10 17.25M8 2h9a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2v-4h2v4h9V4H8v4H6V4a2 2 0 0 1 2-2z"/></svg></a></li>                </ul>
            </div>
        
        <!-- SITE TOOLS -->
        <div id="dokuwiki__sitetools">
            <h3 class="a11y">Site Tools</h3>
            <form action="/doku.php?id=start" method="get" role="search" class="search doku_form" id="dw__search" accept-charset="utf-8"><input type="hidden" name="do" value="search" /><input type="hidden" name="id" value="additional_queue_considerations.htm" /><div class="no"><input name="q" type="text" class="edit" title="[F]" accesskey="f" placeholder="Search" autocomplete="on" id="qsearch__in" value="" /><button value="1" type="submit" title="Search">Search</button><div id="qsearch__out" class="ajax_qsearch JSpopup"></div></div></form>            <div class="mobileTools">
                <form action="/doku.php" method="get" accept-charset="utf-8"><div class="no"><input type="hidden" name="id" value="additional_queue_considerations.htm" /><select name="do" class="edit quickselect" title="Tools"><option value="">Tools</option><optgroup label="Page Tools"><option value="edit">Show pagesource</option><option value="revisions">Old revisions</option><option value="backlink">Backlinks</option></optgroup><optgroup label="Site Tools"><option value="recent">Recent Changes</option><option value="media">Media Manager</option><option value="index">Sitemap</option></optgroup><optgroup label="User Tools"><option value="login">Log In</option></optgroup></select><button type="submit">&gt;</button></div></form>            </div>
            <ul>
                <li class="action recent"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=recent" title="Recent Changes [r]" rel="nofollow" accesskey="r">Recent Changes</a></li><li class="action media"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=media&amp;ns=" title="Media Manager" rel="nofollow">Media Manager</a></li><li class="action index"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=index" title="Sitemap [x]" rel="nofollow" accesskey="x">Sitemap</a></li>            </ul>
        </div>

    </div>

    <!-- BREADCRUMBS -->
            <div class="breadcrumbs">
                                        <div class="trace"><span class="bchead">Trace:</span> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=record_declare_record_structure_.htm"  class="breadcrumbs" title="record_declare_record_structure_.htm">record_declare_record_structure_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=null_data_processing.htm"  class="breadcrumbs" title="null_data_processing.htm">null_data_processing.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=file_structure_properties.htm"  class="breadcrumbs" title="file_structure_properties.htm">file_structure_properties.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=view_structures.htm"  class="breadcrumbs" title="view_structures.htm">view_structures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=view_declare_a_virtual_file_.htm"  class="breadcrumbs" title="view_declare_a_virtual_file_.htm">view_declare_a_virtual_file_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=project_set_view_fields_.htm"  class="breadcrumbs" title="project_set_view_fields_.htm">project_set_view_fields_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=join_declare_a_join_operation_.htm"  class="breadcrumbs" title="join_declare_a_join_operation_.htm">join_declare_a_join_operation_.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=queue_structures.htm"  class="breadcrumbs" title="queue_structures.htm">queue_structures.htm</a></bdi> <span class="bcsep">•</span> <bdi><a href="/doku.php?id=queue_declare_a_memory_queue_structure_.htm"  class="breadcrumbs" title="queue_declare_a_memory_queue_structure_.htm">queue_declare_a_memory_queue_structure_.htm</a></bdi> <span class="bcsep">•</span> <span class="curid"><bdi><a href="/doku.php?id=additional_queue_considerations.htm"  class="breadcrumbs" title="additional_queue_considerations.htm">additional_queue_considerations.htm</a></bdi></span></div>
                    </div>
    


    <hr class="a11y" />
</div></div><!-- /header -->

        <div class="wrapper group">

            
            <!-- ********** CONTENT ********** -->
            <div id="dokuwiki__content"><div class="pad group">
                
                <div class="pageId"><span>additional_queue_considerations.htm</span></div>

                <div class="page group">
                                                            <!-- wikipage start -->
                    <div class="table sectionedit1"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>Navigation:</strong>  <a href="/doku.php?id=introduction.htm" class="wikilink1" title="introduction.htm">Language Reference</a> &gt; 4 - Entity Declarations &gt; Queue Structures &gt;====== Additional QUEUE Considerations ====== </td><td class="col1"> <a href="/doku.php?id=queue_declare_a_memory_queue_structure_.htm" class="media" title="queue_declare_a_memory_queue_structure_.htm"><img src="/lib/exe/fetch.php?media=btn_prev_n.gif" class="media" title="Previous page" alt="Previous page" /></a><a href="/doku.php?id=introduction.htm" class="media" title="introduction.htm"><img src="/lib/exe/fetch.php?media=btn_home_n.gif" class="media" title="Return to chapter overview" alt="Return to chapter overview" /></a><a href="/doku.php?id=declaration_attributes.htm" class="media" title="declaration_attributes.htm"><img src="/lib/exe/fetch.php?media=btn_next_n.gif" class="media" title="Next page" alt="Next page" /></a> </td>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign" colspan="2">  </td>
	</tr>
</table></div>

<p>
This topic expands on important issues in understanding how supported processing statements and optional parameters can affect a QUEUE.
</p>

<p>
<em class="u"><strong>ADD, GET, PUT to a QUEUE by KEY</strong></em>
</p>

<p>
There are three ( 3 ) forms of the QUEUE <em>key</em> parameter: <em>sequence</em>, <em>string</em> and <em>function</em>. Each one is described as follows:
</p>

<p>
<em>sequence [±]key1[,[±]key2…]</em>
</p>

<p>
A list of up to 16 labels of QUEUE fields, separated by commas and with an optional + or - sign preceding the label. If the key component is specified with -, it is used in descending order. Reference field types (including ANY) and arrays are not permitted.
</p>

<p>
<em>Name</em>
</p>

<p>
A string constant, variable or expression. Its value must contain a list of up to 16 NAME attributes of QUEUE fields with an optional leading + or - sign, separated with commas. If the key component is specified with -, it is used in descending order. Reference field types (including ANY) and arrays are not permitted.
</p>

<p>
When comparing two keys using one of the two forms above, the keys are considered <em>equal</em> if all key components are equal.
</p>

<p>
A key is considered <em>greater</em> <em>than</em> another key, if its <em>n</em>th key component is greater than the second key, and the extra component defined is in ascending order (with all other key components being equal.)
</p>

<p>
Finally, a key is considered <em>less than</em> another key if its <em>n</em>th key component is greater than the second key, and the extra component defined is in descending order (with all other key components being equal.)
</p>

<p>
There is also a third form of KEY types regarding QUEUES:
</p>

<p>
<em>Function</em>
</p>

<p>
The label of the function containing two parameters of a *GROUP or named GROUP passed by address, and having a SIGNED return value. Both parameters must use the same parameter type, and cannot be omitted. The RAW, C and PASCAL attributes are not permitted in the prototype declaration.
</p>

<p>
The first parameter of the FUNCTION is the <em>target</em> parameter, or record that is about to be acted on. The second parameter is a <em>comparison</em> value, used to determine the position where the first parameter is to be placed or retrieved.
</p>

<p>
Using ADD, PUT or GET by FUNCTION will read or write from a positional value returned by the function.
</p>

<p>
If the function returns zero (0) the queue record of the first parameter is treated as equal to the second. In this case, no record is ADDed or PUT, since the values are equal.
</p>

<p>
If the function returns a negative value, the ADD or PUT of the record passed as a first parameter is treated as having less value than record passed as second parameter and is written accordingly.
</p>

<p>
If the function returns a positive value, the ADD or PUT of the record passed as a first parameter is treated as having a greater value than record passed as second parameter and is written accordingly.
</p>

<p>
<em class="u"><strong>Using Multiple Sort Orders</strong></em>
</p>

<p>
The following topic describes the internal paradigm regarding QUEUEs with multiple sort orders.
</p>

<p>
Prior to Clarion 5, it was possible to use the GET(Queue,Key) form to obtain a POINTER to the first or last record in a range.
</p>

<p>
For example:
</p>

<p>
<strong>Q QUEUE</strong>
</p>

<p>
<strong>A  LONG</strong>
</p>

<p>
<strong>B  STRING(20)</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong>  CODE</strong>
</p>

<p>
<strong>  …</strong>
</p>

<p>
<strong>  SORT(Q, Q.A, Q.B)      !sort the queue in a,b sequence</strong>
</p>

<p>
<strong>  Q.A = 1                !set to the first record</strong>
</p>

<p>
<strong>  CLEAR (Q.B)            !clear secondary field to make sure</strong>
</p>

<p>
<strong>  GET (Q, Q.A)           !GET to first record</strong>
</p>

<p>
<strong>  first# = POINTER(Q)    !GET fails, but stores the POINTER where record would have existed</strong>
</p>

<p>
<strong>  Q.A = 5                !set to the last record or beyond</strong>
</p>

<p>
<strong>  CLEAR (Q.B)            !again, clear secondary sort field</strong>
</p>

<p>
<strong>  GET (Q, Q.A)           !GET will fail</strong>
</p>

<p>
<strong>  last# = POINTER(Q)-1   !and returns where new record will be</strong>
</p>

<p>
After this code executes, <em>first#</em> contains a pointer to the first record of the <strong><em>Q.A</em></strong> field in a range (in this example range is 1 through 4), and <em>last#</em> contains a pointer to the last record with value of <strong>Q.A</strong> within this range.
</p>

<p>
This technique is not possible for queues with multiple sort orders. Even if one set of key components is a subset of another one, sort orders based on them are handled separately.
</p>

<p>
Hence, if the program uses a partial key seed value in the GET(Queue,Key) statement, the queue logic must build the sort order based on specified key if it does not exist, and perform the GET operation using this sort order. In other words, the GET never fails.
</p>

<p>
Sort orders based on “full” and “partial” keys can be different because of queue rules: ADD adds a new record after all other records with the same key, and PUT updates an existing record after all other records with the same key. The new POSITION(Queue) function implements the behavior that an attempted GET on a partial key value used to have.
</p>

<p>
Every active QUEUE can have up to 16 sort orders that exist in memory <em>simultaneously</em>.
</p>

<p>
For the purpose of this topic, sort orders not defined as the current active sort, but exist in memory by prior QUEUE actions (described later), are defined as a <strong>memory key</strong>.
</p>

<p>
All memory keys share the same queue of records, but each one orders the records according to the key that it is based on.
</p>

<p>
At any point in time during the life of the queue, one of the memory keys is the “default”. The default memory key is the one that a SORT has been performed on most recently. If no SORT has been executed, the default memory key can be either unsorted, or sorted by the ADD(key) or PUT(key) methods (“sorting as you go”)
</p>

<p>
The unsorted key is often used for non-keyed operations (i.e., POINTER()).
</p>

<p>
<strong>FREE</strong>() removes all memory keys.
</p>

<p>
The memory key based on the last key used in the keyed ADD, GET, PUT, or a SORT statement is called the <strong>active key</strong>. It is considered active while this particular statement is executing. If the active key did not exist before the keyed statement, it is created by taking the initial sequence of records defined by the default sort order, and is resorted using the new memory key.
</p>

<p>
<strong>SORT</strong> makes the active key the <strong>default</strong>. For example, if the active key existed before the SORT, no resorting is performed, because it doesn&#039;t need to.
</p>

<p>
<strong>GET(Queue,Key)</strong> retrieves the first record using the active key&#039;s (Key parameter) sort order that matches current content of the queue buffer. If no records can be found, the buffer is not changed and value of next call to POINTER() is undefined.
</p>

<p>
<strong>GET(Queue,Pointer)</strong> retrieves record with the relative position equal to the Pointer position in the default memory key.
</p>

<p>
ADD and PUT work differently for default key and all other memory keys. All memory keys that are not the default are updated using their key values always, even for non-keyed operations. Hence, their current sort is always correct.
</p>

<p>
For the original sort order, the situation is a little more complex. Here, the traditional rules are in effect:
</p>

<p>
<strong>PUT(Queue)</strong>:
</p>

<p>
Writes the record back to the same relative position in the original sort order as the GET or ADD retrieved it. If the original sort order was modified since the last GET or ADD, it is marked as unsorted.
</p>

<p>
<strong>PUT(Queue,Pointer)</strong>:
</p>

<p>
If the passed <em>Pointer</em> is equal to relative position in the original sort order of the record that has been retrieved by GET or ADD, the statement is equivalent to PUT(queue). Otherwise, the record is removed from its old position in the original sort order and is added to the one specified by the new pointer value. If the original sort order becomes broken after that, it is marked as unsorted.
</p>

<p>
<strong>PUT(Queue,Key)</strong>
</p>

<p>
If <em>Key</em> is a key that the original sort order is based on, and the key value is not changed, PUT updates the record value in original sort order. If the key value is changed, the record&#039;s value is removed from its old position and added to a new one, based on the new key value. The original sort order always remains unbroken in this case.
</p>

<p>
If <em>Key</em> is not a key that the original sort order is based on, the original sort order is marked as unsorted, the record&#039;s entry is removed from its old position, and a new one added immediately before the first record it finds with the key value based on <em>Key</em>.
</p>

<p>
Because the search algorithm is based on the history of work with this queue and its memory keys, it is impossible to say where the new position will be. Use the POINTER() function to return it.
</p>

<p>
<strong>ADD(Queue)</strong>
</p>

<p>
Equivalent to <strong>ADD(Queue,RECORDS(Queue)+1)</strong>
</p>

<p>
<strong>ADD(Queue,Pointer)</strong>
</p>

<p>
The record in the queue buffer is added to given relative position in the original sort order. If the original sort order becomes broken after that, it is marked as unsorted.
</p>

<p>
<strong>ADD(Queue,Key)</strong>
</p>

<p>
The record in the queue buffer is added immediately before first record in the original sort order that has greater key value, or, to the end of the sort order if records with greater key value are not found. If <em>Key</em> is a key that the original sort order is based on, this is the correct position and the default sort order remains unbroken. Otherwise, it is marked as unsorted. Similar to using PUT on another key value, the position of the added record is unknown if the default sort order is not based on the <em>Key</em>.
</p>

<p>
<strong>Example 1:</strong>
</p>

<p>
<strong>Q QUEUE</strong>
</p>

<p>
<strong>A  LONG</strong>
</p>

<p>
<strong>B  LONG</strong>
</p>

<p>
<strong>  END</strong>
</p>

<p>
<strong>  CODE</strong>
</p>

<p>
<strong>   FREE(Q)</strong>
</p>

<p>
<strong>   Q.A = 1</strong>
</p>

<p>
<strong>   Q.B = 5</strong>
</p>

<p>
<strong>   ADD(Q, Q.A)</strong>
</p>

<p>
There is only one sort order based on the <strong>(Q.A)</strong> key; it is the active memory key
</p>

<p>
<strong>SORT (Q, Q.A, Q.B)</strong>
</p>

<p>
Now, there are two sort orders that exist, based on a <strong>(Q.A)</strong> and <strong>(Q.A,Q.B)</strong> keys. The latter key is now the active memory key.
</p>

<p>
The order of records is now:
</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>(Q.A):</strong> </td><td class="col1"> <strong>(1, 5)</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>(Q.A,Q.B)</strong> </td><td class="col1"> <strong>(1, 5)</strong> </td>
	</tr>
</table></div>

<p>
If we now execute:
</p>

<p>
<strong>  Q.A = 1</strong>
</p>

<p>
<strong>  Q.B = 1</strong>
</p>

<p>
<strong>  ADD (Q, Q.A, Q.B)</strong>
</p>

<p>
The order of records is now:
</p>
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>(Q.A):</strong> </td><td class="col1"> <strong>(1, 5) (1, 1)</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>(Q.A,Q.B):</strong> </td><td class="col1"> <strong>(1, 1) (1, 5)</strong> </td>
	</tr>
</table></div>

<p>
Executing the statement:
</p>

<p>
<strong>    GET(Q, Q.A)</strong>
</p>

<p>
Retrieves the <strong>(1, 5)</strong> record, because it is the first record matching the key value in the current queue buffer based on <strong>(Q.A)</strong>.
</p>

<p>
<strong>Example 2:</strong>
</p>

<p>
<strong>Q   QUEUE</strong>
</p>

<p>
<strong>A     LONG</strong>
</p>

<p>
<strong>B     LONG</strong>
</p>

<p>
<strong>    END</strong>
</p>

<p>
<strong>  CODE</strong>
</p>

<p>
<strong>  FREE(Q)</strong>
</p>

<p>
<strong>  Q.A = 1</strong>
</p>

<p>
<strong>  Q.B = 5</strong>
</p>

<p>
<strong>  ADD (Q)</strong>
</p>

<p>
There is one original sort order; and it is the active key.
</p>

<p>
<strong>SORT (Q, Q.A, Q.B)</strong>
</p>

<p>
Now, there is one sort order here based on the <strong>(Q.A,Q.B)</strong> key. It is now the new active key.
</p>

<p>
The current order of records is:
</p>
<div class="table sectionedit4"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>(Q.A,Q.B)</strong> </td><td class="col1"> <strong>(1, 5)</strong> </td>
	</tr>
</table></div>

<p>
After executing the following:
</p>

<p>
<strong>    Q.A = 1</strong>
</p>

<p>
<strong>    Q.B = 1</strong>
</p>

<p>
<strong>    ADD (Q, Q.A, Q.B)</strong>
</p>

<p>
The new order of records becomes:
</p>
<div class="table sectionedit5"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>(Q.A,Q.B)</strong> </td><td class="col1"> <strong>(1, 1) (1, 5)</strong> </td>
	</tr>
</table></div>

<p>
Executing:
</p>

<p>
<strong>GET(Q, Q.A)</strong>
</p>

<p>
The sort order based on <strong>(Q.A)</strong> does not exist. Hence, it is created as a new sequence of records in default order resorted with the <strong>(Q.A)</strong> key.
</p>

<p>
The memory keys after this GET:
</p>
<div class="table sectionedit6"><table class="inline">
	<tr class="row0">
		<td class="col0"> <strong>(Q.A)</strong> </td><td class="col1"> <strong>(1, 1) (1, 5)</strong> </td>
	</tr>
	<tr class="row1">
		<td class="col0"> <strong>(Q.A,Q.B)</strong> </td><td class="col1"> <strong>(1, 1) (1, 5)</strong> </td>
	</tr>
</table></div>

<p>
The GET retrieves the <strong>(1, 1)</strong> record because it is the first record with the key value that matches the current queue buffer based on <strong>(Q.A)</strong>.
</p>

                    <!-- wikipage stop -->
                                    </div>

                <div class="docInfo"><bdi>additional_queue_considerations.htm.txt</bdi> · Last modified: 2021/04/15 15:56 (external edit)</div>

                            </div></div><!-- /content -->

            <hr class="a11y" />

            <!-- PAGE ACTIONS -->
            <div id="dokuwiki__pagetools">
                <h3 class="a11y">Page Tools</h3>
                <div class="tools">
                    <ul>
                        <li class="source"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=edit" title="Show pagesource [v]" rel="nofollow" accesskey="v"><span>Show pagesource</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 9h5.5L13 3.5V9M6 2h8l6 6v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4c0-1.11.89-2 2-2m.12 13.5l3.74 3.74 1.42-1.41-2.33-2.33 2.33-2.33-1.42-1.41-3.74 3.74m11.16 0l-3.74-3.74-1.42 1.41 2.33 2.33-2.33 2.33 1.42 1.41 3.74-3.74z"/></svg></a></li><li class="revs"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=revisions" title="Old revisions [o]" rel="nofollow" accesskey="o"><span>Old revisions</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M11 7v5.11l4.71 2.79.79-1.28-4-2.37V7m0-5C8.97 2 5.91 3.92 4.27 6.77L2 4.5V11h6.5L5.75 8.25C6.96 5.73 9.5 4 12.5 4a7.5 7.5 0 0 1 7.5 7.5 7.5 7.5 0 0 1-7.5 7.5c-3.27 0-6.03-2.09-7.06-5h-2.1c1.1 4.03 4.77 7 9.16 7 5.24 0 9.5-4.25 9.5-9.5A9.5 9.5 0 0 0 12.5 2z"/></svg></a></li><li class="backlink"><a href="/doku.php?id=additional_queue_considerations.htm&amp;do=backlink" title="Backlinks" rel="nofollow"><span>Backlinks</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10.59 13.41c.41.39.41 1.03 0 1.42-.39.39-1.03.39-1.42 0a5.003 5.003 0 0 1 0-7.07l3.54-3.54a5.003 5.003 0 0 1 7.07 0 5.003 5.003 0 0 1 0 7.07l-1.49 1.49c.01-.82-.12-1.64-.4-2.42l.47-.48a2.982 2.982 0 0 0 0-4.24 2.982 2.982 0 0 0-4.24 0l-3.53 3.53a2.982 2.982 0 0 0 0 4.24m2.82-4.24c.39-.39 1.03-.39 1.42 0a5.003 5.003 0 0 1 0 7.07l-3.54 3.54a5.003 5.003 0 0 1-7.07 0 5.003 5.003 0 0 1 0-7.07l1.49-1.49c-.01.82.12 1.64.4 2.43l-.47.47a2.982 2.982 0 0 0 0 4.24 2.982 2.982 0 0 0 4.24 0l3.53-3.53a2.982 2.982 0 0 0 0-4.24.973.973 0 0 1 0-1.42z"/></svg></a></li><li class="top"><a href="#dokuwiki__top" title="Back to top [t]" rel="nofollow" accesskey="t"><span>Back to top</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13 20h-2V8l-5.5 5.5-1.42-1.42L12 4.16l7.92 7.92-1.42 1.42L13 8v12z"/></svg></a></li>                    </ul>
                </div>
            </div>
        </div><!-- /wrapper -->

        
<!-- ********** FOOTER ********** -->
<div id="dokuwiki__footer"><div class="pad">
    <div class="license">Except where otherwise noted, content on this wiki is licensed under the following license: <bdi><a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license" class="urlextern">CC Attribution-Share Alike 4.0 International</a></bdi></div>
    <div class="buttons">
        <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"><img src="/lib/images/license/button/cc-by-sa.png" alt="CC Attribution-Share Alike 4.0 International" /></a>        <a href="https://www.dokuwiki.org/donate" title="Donate" ><img
            src="/lib/tpl/dokuwiki/images/button-donate.gif" width="80" height="15" alt="Donate" /></a>
        <a href="https://php.net" title="Powered by PHP" ><img
            src="/lib/tpl/dokuwiki/images/button-php.gif" width="80" height="15" alt="Powered by PHP" /></a>
        <a href="//validator.w3.org/check/referer" title="Valid HTML5" ><img
            src="/lib/tpl/dokuwiki/images/button-html5.png" width="80" height="15" alt="Valid HTML5" /></a>
        <a href="//jigsaw.w3.org/css-validator/check/referer?profile=css3" title="Valid CSS" ><img
            src="/lib/tpl/dokuwiki/images/button-css.png" width="80" height="15" alt="Valid CSS" /></a>
        <a href="https://dokuwiki.org/" title="Driven by DokuWiki" ><img
            src="/lib/tpl/dokuwiki/images/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" /></a>
    </div>
</div></div><!-- /footer -->

    </div></div><!-- /site -->

    <div class="no"><img src="/lib/exe/indexer.php?id=additional_queue_considerations.htm&amp;1631826475" width="2" height="1" alt="" /></div>
    <div id="screen__mode" class="no"></div></body>
</html>
